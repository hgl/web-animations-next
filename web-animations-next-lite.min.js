// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
//     You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//     See the License for the specific language governing permissions and
// limitations under the License.

(function(a, b) {
  b["true"] = a;
  var c = {};
  var d = {};
  var e = {};
  if (!false) {
    var f = null;
  }
  (function(a, b) {
    var c = "backwards|forwards|both|none".split("|");
    var d = "reverse|alternate|alternate-reverse".split("|");
    function e(a) {
      if ("number" == typeof a) {
        return a;
      }
      var b = {};
      for (var c in a) {
        b[c] = a[c];
      }
      return b;
    }
    function f() {
      this._delay = 0;
      this._endDelay = 0;
      this._fill = "none";
      this._iterationStart = 0;
      this._iterations = 1;
      this._duration = 0;
      this._playbackRate = 1;
      this._direction = "normal";
      this._easing = "linear";
    }
    f.prototype = {
      _setMember: function(b, c) {
        this["_" + b] = c;
        if (this._effect) {
          this._effect._timingInput[b] = c;
          this._effect._timing = a.normalizeTimingInput(a.normalizeTimingInput(this._effect._timingInput));
          this._effect.activeDuration = a.calculateActiveDuration(this._effect._timing);
          if (this._effect._animation) {
            this._effect._animation._rebuildUnderlyingAnimation();
          }
        }
      },
      get playbackRate() {
        return this._playbackRate;
      },
      set delay(a) {
        this._setMember("delay", a);
      },
      get delay() {
        return this._delay;
      },
      set endDelay(a) {
        this._setMember("endDelay", a);
      },
      get endDelay() {
        return this._endDelay;
      },
      set fill(a) {
        this._setMember("fill", a);
      },
      get fill() {
        return this._fill;
      },
      set iterationStart(a) {
        this._setMember("iterationStart", a);
      },
      get iterationStart() {
        return this._iterationStart;
      },
      set duration(a) {
        this._setMember("duration", a);
      },
      get duration() {
        return this._duration;
      },
      set direction(a) {
        this._setMember("direction", a);
      },
      get direction() {
        return this._direction;
      },
      set easing(a) {
        this._setMember("easing", a);
      },
      get easing() {
        return this._easing;
      },
      set iterations(a) {
        this._setMember("iterations", a);
      },
      get iterations() {
        return this._iterations;
      }
    };
    function g(b, e, g) {
      var h = new f();
      if (e) {
        h.fill = "both";
        h.duration = "auto";
      }
      if ("number" == typeof b && !isNaN(b)) {
        h.duration = b;
      } else {
        if (void 0 !== b) {
          Object.getOwnPropertyNames(b).forEach(function(e) {
            if ("auto" != b[e]) {
              if ("number" == typeof h[e] || "duration" == e) {
                if ("number" != typeof b[e] || isNaN(b[e])) {
                  return;
                }
              }
              if ("fill" == e && c.indexOf(b[e]) == -1) {
                return;
              }
              if ("direction" == e && d.indexOf(b[e]) == -1) {
                return;
              }
              if ("playbackRate" == e && 1 !== b[e] && a.isDeprecated("AnimationEffectTiming.playbackRate", "2014-11-28", "Use Animation.playbackRate instead.")) {
                return;
              }
              h[e] = b[e];
            }
          });
        }
      }
      return h;
    }
    function h(a) {
      if ("number" == typeof a) {
        if (isNaN(a)) {
          a = {
            duration: 0
          };
        } else {
          a = {
            duration: a
          };
        }
      }
      return a;
    }
    function i(b, c) {
      b = a.numericTimingToObject(b);
      var d = g(b, c);
      d._easing = t(d.easing);
      return d;
    }
    function j(a, b, c, d) {
      if (a < 0 || a > 1 || c < 0 || c > 1) {
        return s;
      }
      return function(e) {
        if (0 == e || 1 == e) {
          return e;
        }
        var f = 0, g = 1;
        while (1) {
          var h = (f + g) / 2;
          function i(a, b, c) {
            return 3 * a * (1 - c) * (1 - c) * c + 3 * b * (1 - c) * c * c + c * c * c;
          }
          var j = i(a, c, h);
          if (Math.abs(e - j) < .001) {
            return i(b, d, h);
          }
          if (j < e) {
            f = h;
          } else {
            g = h;
          }
        }
      };
    }
    var k = 1;
    var l = .5;
    var m = 0;
    function n(a, b) {
      return function(c) {
        if (c >= 1) {
          return 1;
        }
        var d = 1 / a;
        c += b * d;
        return c - c % d;
      };
    }
    var o = {
      ease: j(.25, .1, .25, 1),
      "ease-in": j(.42, 0, 1, 1),
      "ease-out": j(0, 0, .58, 1),
      "ease-in-out": j(.42, 0, .58, 1),
      "step-start": n(1, k),
      "step-middle": n(1, l),
      "step-end": n(1, m)
    };
    var p = "\\s*(-?\\d+\\.?\\d*|-?\\.\\d+)\\s*";
    var q = new RegExp("cubic-bezier\\(" + p + "," + p + "," + p + "," + p + "\\)");
    var r = /steps\(\s*(\d+)\s*,\s*(start|middle|end)\s*\)/;
    var s = function(a) {
      return a;
    };
    function t(a) {
      var b = q.exec(a);
      if (b) {
        return j.apply(this, b.slice(1).map(Number));
      }
      var c = r.exec(a);
      if (c) {
        return n(Number(c[1]), {
          start: k,
          middle: l,
          end: m
        }[c[2]]);
      }
      var d = o[a];
      if (d) {
        return d;
      }
      return s;
    }
    function u(a) {
      return Math.abs(v(a) / a.playbackRate);
    }
    function v(a) {
      return a.duration * a.iterations;
    }
    var w = 0;
    var x = 1;
    var y = 2;
    var z = 3;
    function A(a, b, c) {
      if (null == b) {
        return w;
      }
      if (b < c.delay) {
        return x;
      }
      if (b >= c.delay + a) {
        return y;
      }
      return z;
    }
    function B(a, b, c, d, e) {
      switch (d) {
       case x:
        if ("backwards" == b || "both" == b) {
          return 0;
        }
        return null;

       case z:
        return c - e;

       case y:
        if ("forwards" == b || "both" == b) {
          return a;
        }
        return null;

       case w:
        return null;
      }
    }
    function C(a, b, c, d) {
      return (d.playbackRate < 0 ? b - a : b) * d.playbackRate + c;
    }
    function D(a, b, c, d, e) {
      if (c === 1 / 0 || c === -(1 / 0) || c - d == b && e.iterations && (e.iterations + e.iterationStart) % 1 == 0) {
        return a;
      }
      return c % a;
    }
    function E(a, b, c, d) {
      if (0 === c) {
        return 0;
      }
      if (b == a) {
        return d.iterationStart + d.iterations - 1;
      }
      return Math.floor(c / a);
    }
    function F(a, b, c, d) {
      var e = a % 2 >= 1;
      var f = "normal" == d.direction || d.direction == (e ? "alternate-reverse" : "alternate");
      var g = f ? c : b - c;
      var h = g / b;
      return b * d.easing(h);
    }
    function G(a, b, c) {
      var d = A(a, b, c);
      var e = B(a, c.fill, b, d, c.delay);
      if (null === e) {
        return null;
      }
      if (0 === a) {
        return d === x ? 0 : 1;
      }
      var f = c.iterationStart * c.duration;
      var g = C(a, e, f, c);
      var h = D(c.duration, v(c), g, f, c);
      var i = E(c.duration, h, g, c);
      return F(i, c.duration, h, c) / c.duration;
    }
    a.cloneTimingInput = e;
    a.makeTiming = g;
    a.numericTimingToObject = h;
    a.normalizeTimingInput = i;
    a.calculateActiveDuration = u;
    a.calculateTimeFraction = G;
    a.calculatePhase = A;
    a.toTimingFunction = t;
    if (false) {
      b.normalizeTimingInput = i;
      b.toTimingFunction = t;
      b.calculateActiveDuration = u;
      b.calculatePhase = A;
      b.PhaseNone = w;
      b.PhaseBefore = x;
      b.PhaseActive = z;
      b.PhaseAfter = y;
      b.calculateActiveTime = B;
      b.calculateScaledActiveTime = C;
      b.calculateIterationTime = D;
      b.calculateCurrentIteration = E;
      b.calculateTransformedTime = F;
    }
  })(c, f);
  (function(a, b) {
    var c = {
      background: [ "backgroundImage", "backgroundPosition", "backgroundSize", "backgroundRepeat", "backgroundAttachment", "backgroundOrigin", "backgroundClip", "backgroundColor" ],
      border: [ "borderTopColor", "borderTopStyle", "borderTopWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth" ],
      borderBottom: [ "borderBottomWidth", "borderBottomStyle", "borderBottomColor" ],
      borderColor: [ "borderTopColor", "borderRightColor", "borderBottomColor", "borderLeftColor" ],
      borderLeft: [ "borderLeftWidth", "borderLeftStyle", "borderLeftColor" ],
      borderRadius: [ "borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius" ],
      borderRight: [ "borderRightWidth", "borderRightStyle", "borderRightColor" ],
      borderTop: [ "borderTopWidth", "borderTopStyle", "borderTopColor" ],
      borderWidth: [ "borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth" ],
      flex: [ "flexGrow", "flexShrink", "flexBasis" ],
      font: [ "fontFamily", "fontSize", "fontStyle", "fontVariant", "fontWeight", "lineHeight" ],
      margin: [ "marginTop", "marginRight", "marginBottom", "marginLeft" ],
      outline: [ "outlineColor", "outlineStyle", "outlineWidth" ],
      padding: [ "paddingTop", "paddingRight", "paddingBottom", "paddingLeft" ]
    };
    var d = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
    var e = {
      thin: "1px",
      medium: "3px",
      thick: "5px"
    };
    var f = {
      borderBottomWidth: e,
      borderLeftWidth: e,
      borderRightWidth: e,
      borderTopWidth: e,
      fontSize: {
        "xx-small": "60%",
        "x-small": "75%",
        small: "89%",
        medium: "100%",
        large: "120%",
        "x-large": "150%",
        "xx-large": "200%"
      },
      fontWeight: {
        normal: "400",
        bold: "700"
      },
      outlineWidth: e,
      textShadow: {
        none: "0px 0px 0px transparent"
      },
      boxShadow: {
        none: "0px 0px 0px 0px transparent"
      }
    };
    function g(a, b) {
      if (a in f) {
        return f[a][b] || b;
      }
      return b;
    }
    function h(a, b, e) {
      var f = c[a];
      if (f) {
        d.style[a] = b;
        for (var h in f) {
          var i = f[h];
          var j = d.style[i];
          e[i] = g(i, j);
        }
      } else {
        e[a] = g(a, b);
      }
    }
    function i(b) {
      if (!Array.isArray(b) && null !== b) {
        throw new TypeError("Keyframes must be null or an array of keyframes");
      }
      if (null == b) {
        return [];
      }
      var c = b.map(function(b) {
        var c = {};
        for (var d in b) {
          var e = b[d];
          if ("offset" == d) {
            if (null != e) {
              e = Number(e);
              if (!isFinite(e)) {
                throw new TypeError("keyframe offsets must be numbers.");
              }
            }
          } else {
            if ("composite" == d) {
              throw {
                type: DOMException.NOT_SUPPORTED_ERR,
                name: "NotSupportedError",
                message: "add compositing is not supported"
              };
            } else {
              if ("easing" == d) {
                e = a.toTimingFunction(e);
              } else {
                e = "" + e;
              }
            }
          }
          h(d, e, c);
        }
        if (void 0 == c.offset) {
          c.offset = null;
        }
        if (void 0 == c.easing) {
          c.easing = a.toTimingFunction("linear");
        }
        return c;
      });
      var d = true;
      var e = true;
      var f = -(1 / 0);
      for (var g = 0; g < c.length; g++) {
        var i = c[g].offset;
        if (null != i) {
          if (i < f) {
            throw {
              code: DOMException.INVALID_MODIFICATION_ERR,
              name: "InvalidModificationError",
              message: "Keyframes are not loosely sorted by offset. Sort or specify offsets."
            };
          }
          f = i;
        } else {
          d = false;
        }
      }
      c = c.filter(function(a) {
        return a.offset >= 0 && a.offset <= 1;
      });
      function j() {
        var a = c.length;
        if (null == c[a - 1].offset) {
          c[a - 1].offset = 1;
        }
        if (a > 1 && null == c[0].offset) {
          c[0].offset = 0;
        }
        var b = 0;
        var d = c[0].offset;
        for (var e = 1; e < a; e++) {
          var f = c[e].offset;
          if (null != f) {
            for (var g = 1; g < e - b; g++) {
              c[b + g].offset = d + (f - d) * g / (e - b);
            }
            b = e;
            d = f;
          }
        }
      }
      if (!d) {
        j();
      }
      return c;
    }
    a.normalizeKeyframes = i;
    if (false) {
      b.normalizeKeyframes = i;
    }
  })(c, f);
  (function(a) {
    var b = {};
    a.isDeprecated = function(a, c, d, e) {
      var f = e ? "are" : "is";
      var g = new Date();
      var h = new Date(c);
      h.setMonth(h.getMonth() + 3);
      if (g < h) {
        if (!(a in b)) {
          console.warn("Web Animations: " + a + " " + f + " deprecated and will stop working on " + h.toDateString() + ". " + d);
        }
        b[a] = true;
        return false;
      } else {
        return true;
      }
    };
    a.deprecated = function(b, c, d, e) {
      var f = e ? "are" : "is";
      if (a.isDeprecated(b, c, d, e)) {
        throw new Error(b + " " + f + " no longer supported. " + d);
      }
    };
  })(c);
  (function() {
    if (document.documentElement.animate) {
      var a = document.documentElement.animate([], 0);
      var b = true;
      if (a) {
        b = false;
        "play|currentTime|pause|reverse|playbackRate|cancel|finish|startTime|playState".split("|").forEach(function(c) {
          if (void 0 === a[c]) {
            b = true;
          }
        });
      }
      if (!b) {
        return;
      }
    }
    (function(a, b, c) {
      b.convertEffectInput = function(c) {
        var f = a.normalizeKeyframes(c);
        var g = d(f);
        var h = e(g);
        return function(a, c) {
          if (null != c) {
            h.filter(function(a) {
              return c <= 0 && 0 == a.startTime || c >= 1 && 1 == a.endTime || c >= a.startTime && c <= a.endTime;
            }).forEach(function(d) {
              var e = c - d.startTime;
              var f = d.endTime - d.startTime;
              var g = 0 == f ? 0 : d.easing(e / f);
              b.apply(a, d.property, d.interpolation(g));
            });
          } else {
            for (var d in g) {
              if ("offset" != d && "easing" != d && "composite" != d) {
                b.clear(a, d);
              }
            }
          }
        };
      };
      function d(a) {
        var b = {};
        for (var c = 0; c < a.length; c++) {
          for (var d in a[c]) {
            if ("offset" != d && "easing" != d && "composite" != d) {
              var e = {
                offset: a[c].offset,
                easing: a[c].easing,
                value: a[c][d]
              };
              b[d] = b[d] || [];
              b[d].push(e);
            }
          }
        }
        for (var f in b) {
          var g = b[f];
          if (0 != g[0].offset || 1 != g[g.length - 1].offset) {
            throw {
              type: DOMException.NOT_SUPPORTED_ERR,
              name: "NotSupportedError",
              message: "Partial keyframes are not supported"
            };
          }
        }
        return b;
      }
      function e(a) {
        var c = [];
        for (var d in a) {
          var e = a[d];
          for (var f = 0; f < e.length - 1; f++) {
            var g = e[f].offset;
            var h = e[f + 1].offset;
            var i = e[f].value;
            var j = e[f + 1].value;
            if (g == h) {
              if (1 == h) {
                i = j;
              } else {
                j = i;
              }
            }
            c.push({
              startTime: g,
              endTime: h,
              easing: e[f].easing,
              property: d,
              interpolation: b.propertyInterpolation(d, i, j)
            });
          }
        }
        c.sort(function(a, b) {
          return a.startTime - b.startTime;
        });
        return c;
      }
      if (false) {
        c.makePropertySpecificKeyframeGroups = d;
        c.makeInterpolations = e;
      }
    })(c, d, f);
    (function(a, b) {
      var c = {};
      function d(a, b, d) {
        c[d] = c[d] || [];
        c[d].push([ a, b ]);
      }
      function e(a, b, c) {
        for (var e = 0; e < c.length; e++) {
          var f = c[e];
          false && console.assert(f.toLowerCase() === f);
          d(a, b, f);
          if (/-/.test(f)) {
            d(a, b, f.replace(/-(.)/g, function(a, b) {
              return b.toUpperCase();
            }));
          }
        }
      }
      a.addPropertiesHandler = e;
      var f = {
        backgroundColor: "transparent",
        backgroundPosition: "0% 0%",
        borderBottomColor: "currentColor",
        borderBottomLeftRadius: "0px",
        borderBottomRightRadius: "0px",
        borderBottomWidth: "3px",
        borderLeftColor: "currentColor",
        borderLeftWidth: "3px",
        borderRightColor: "currentColor",
        borderRightWidth: "3px",
        borderSpacing: "2px",
        borderTopColor: "currentColor",
        borderTopLeftRadius: "0px",
        borderTopRightRadius: "0px",
        borderTopWidth: "3px",
        bottom: "auto",
        clip: "rect(0px, 0px, 0px, 0px)",
        color: "black",
        fontSize: "100%",
        fontWeight: "400",
        height: "auto",
        left: "auto",
        letterSpacing: "normal",
        lineHeight: "120%",
        marginBottom: "0px",
        marginLeft: "0px",
        marginRight: "0px",
        marginTop: "0px",
        maxHeight: "none",
        maxWidth: "none",
        minHeight: "0px",
        minWidth: "0px",
        opacity: "1.0",
        outlineColor: "invert",
        outlineOffset: "0px",
        outlineWidth: "3px",
        paddingBottom: "0px",
        paddingLeft: "0px",
        paddingRight: "0px",
        paddingTop: "0px",
        right: "auto",
        textIndent: "0px",
        textShadow: "0px 0px 0px transparent",
        top: "auto",
        transform: "",
        verticalAlign: "0px",
        visibility: "visible",
        width: "auto",
        wordSpacing: "normal",
        zIndex: "auto"
      };
      function g(b, d, e) {
        if ("initial" == d || "initial" == e) {
          var g = b.replace(/-(.)/g, function(a, b) {
            return b.toUpperCase();
          });
          if ("initial" == d) {
            d = f[g];
          }
          if ("initial" == e) {
            e = f[g];
          }
        }
        var h = d == e ? [] : c[b];
        for (var i = 0; h && i < h.length; i++) {
          var j = h[i][0](d);
          var k = h[i][0](e);
          if (void 0 !== j && void 0 !== k) {
            var l = h[i][1](j, k);
            if (l) {
              var m = a.Interpolation.apply(null, l);
              return function(a) {
                if (0 == a) {
                  return d;
                }
                if (1 == a) {
                  return e;
                }
                return m(a);
              };
            }
          }
        }
        return a.Interpolation(false, true, function(a) {
          return a ? e : d;
        });
      }
      a.propertyInterpolation = g;
    })(d, f);
    (function(a, b, c) {
      function d(b) {
        var c = 0;
        var d = a.calculateActiveDuration(b);
        var e = function(c) {
          return a.calculateTimeFraction(d, c, b);
        };
        e._totalDuration = b.delay + d + b.endDelay;
        e._isCurrent = function(c) {
          var e = a.calculatePhase(d, c, b);
          return e === PhaseActive || e === PhaseBefore;
        };
        return e;
      }
      b.KeyframeEffect = function(c, e, f) {
        var g = d(a.normalizeTimingInput(f));
        var h = b.convertEffectInput(e);
        var i;
        var j = function() {
          false && console.assert("undefined" !== typeof i);
          h(c, i);
        };
        j._update = function(a) {
          i = g(a);
          return null !== i;
        };
        j._clear = function() {
          h(c, null);
        };
        j._hasSameTarget = function(a) {
          return c === a;
        };
        j._isCurrent = g._isCurrent;
        j._totalDuration = g._totalDuration;
        return j;
      };
      b.NullEffect = function(a) {
        var b = function() {
          if (a) {
            a();
            a = null;
          }
        };
        b._update = function() {
          return null;
        };
        b._totalDuration = 0;
        b._isCurrent = function() {
          return false;
        };
        b._hasSameTarget = function() {
          return false;
        };
        return b;
      };
      if (false) {
        c.webAnimations1KeyframeEffect = b.KeyframeEffect;
        c.effectTime = d;
      }
    })(c, d, f);
    (function(a, b) {
      a.apply = function(b, c, d) {
        b.style[a.propertyName(c)] = d;
      };
      a.clear = function(b, c) {
        b.style[a.propertyName(c)] = "";
      };
    })(d, f);
    (function(a) {
      window.Element.prototype.animate = function(b, c) {
        return a.timeline._play(a.KeyframeEffect(this, b, c));
      };
    })(d);
    (function(a, b) {
      function c(a, b, d) {
        if ("number" == typeof a && "number" == typeof b) {
          return a * (1 - d) + b * d;
        }
        if ("boolean" == typeof a && "boolean" == typeof b) {
          return d < .5 ? a : b;
        }
        false && console.assert(Array.isArray(a) && Array.isArray(b), "If interpolation arguments are not numbers or bools they must be arrays");
        if (a.length == b.length) {
          var e = [];
          for (var f = 0; f < a.length; f++) {
            e.push(c(a[f], b[f], d));
          }
          return e;
        }
        throw "Mismatched interpolation arguments " + a + ":" + b;
      }
      a.Interpolation = function(a, b, d) {
        return function(e) {
          return d(c(a, b, e));
        };
      };
      if (false) {
        b.interpolate = c;
      }
    })(d, f);
    (function(a, b, c) {
      a.sequenceNumber = 0;
      var d = function(a, b, c) {
        this.target = a;
        this.currentTime = b;
        this.timelineTime = c;
        this.type = "finish";
        this.bubbles = false;
        this.cancelable = false;
        this.currentTarget = a;
        this.defaultPrevented = false;
        this.eventPhase = Event.AT_TARGET;
        this.timeStamp = Date.now();
      };
      b.Animation = function(b) {
        this._sequenceNumber = a.sequenceNumber++;
        this._currentTime = 0;
        this._startTime = null;
        this._paused = false;
        this._playbackRate = 1;
        this._inTimeline = true;
        this._finishedFlag = false;
        this.onfinish = null;
        this._finishHandlers = [];
        this._effect = b;
        this._inEffect = this._effect._update(0);
        this._idle = true;
        this._currentTimePending = false;
      };
      b.Animation.prototype = {
        _ensureAlive: function() {
          if (this.playbackRate < 0 && 0 === this.currentTime) {
            this._inEffect = this._effect._update(-1);
          } else {
            this._inEffect = this._effect._update(this.currentTime);
          }
          if (!this._inTimeline && (this._inEffect || !this._finishedFlag)) {
            this._inTimeline = true;
            b.timeline._animations.push(this);
          }
        },
        _tickCurrentTime: function(a, b) {
          if (a != this._currentTime) {
            this._currentTime = a;
            if (this._isFinished && !b) {
              this._currentTime = this._playbackRate > 0 ? this._totalDuration : 0;
            }
            this._ensureAlive();
          }
        },
        get currentTime() {
          if (this._idle || this._currentTimePending) {
            return null;
          }
          return this._currentTime;
        },
        set currentTime(a) {
          a = +a;
          if (isNaN(a)) {
            return;
          }
          b.restart();
          if (!this._paused && null != this._startTime) {
            this._startTime = this._timeline.currentTime - a / this._playbackRate;
          }
          this._currentTimePending = false;
          if (this._currentTime == a) {
            return;
          }
          this._tickCurrentTime(a, true);
          b.invalidateEffects();
        },
        get startTime() {
          return this._startTime;
        },
        set startTime(a) {
          a = +a;
          if (isNaN(a)) {
            return;
          }
          if (this._paused || this._idle) {
            return;
          }
          this._startTime = a;
          this._tickCurrentTime((this._timeline.currentTime - this._startTime) * this.playbackRate);
          b.invalidateEffects();
        },
        get playbackRate() {
          return this._playbackRate;
        },
        set playbackRate(a) {
          if (a == this._playbackRate) {
            return;
          }
          var b = this.currentTime;
          this._playbackRate = a;
          this._startTime = null;
          if ("paused" != this.playState && "idle" != this.playState) {
            this.play();
          }
          if (null != b) {
            this.currentTime = b;
          }
        },
        get _isFinished() {
          return !this._idle && (this._playbackRate > 0 && this._currentTime >= this._totalDuration || this._playbackRate < 0 && this._currentTime <= 0);
        },
        get _totalDuration() {
          return this._effect._totalDuration;
        },
        get playState() {
          if (this._idle) {
            return "idle";
          }
          if (null == this._startTime && !this._paused && 0 != this.playbackRate || this._currentTimePending) {
            return "pending";
          }
          if (this._paused) {
            return "paused";
          }
          if (this._isFinished) {
            return "finished";
          }
          return "running";
        },
        play: function() {
          this._paused = false;
          if (this._isFinished || this._idle) {
            this._currentTime = this._playbackRate > 0 ? 0 : this._totalDuration;
            this._startTime = null;
            b.invalidateEffects();
          }
          this._finishedFlag = false;
          b.restart();
          this._idle = false;
          this._ensureAlive();
        },
        pause: function() {
          if (!this._isFinished && !this._paused && !this._idle) {
            this._currentTimePending = true;
          }
          this._startTime = null;
          this._paused = true;
        },
        finish: function() {
          if (this._idle) {
            return;
          }
          this.currentTime = this._playbackRate > 0 ? this._totalDuration : 0;
          this._startTime = this._totalDuration - this.currentTime;
          this._currentTimePending = false;
        },
        cancel: function() {
          if (!this._inEffect) {
            return;
          }
          this._inEffect = false;
          this._idle = true;
          this.currentTime = 0;
          this._startTime = null;
          this._effect._update(null);
          b.invalidateEffects();
          b.restart();
        },
        reverse: function() {
          this.playbackRate *= -1;
          this.play();
        },
        addEventListener: function(a, b) {
          if ("function" == typeof b && "finish" == a) {
            this._finishHandlers.push(b);
          }
        },
        removeEventListener: function(a, b) {
          if ("finish" != a) {
            return;
          }
          var c = this._finishHandlers.indexOf(b);
          if (c >= 0) {
            this._finishHandlers.splice(c, 1);
          }
        },
        _fireEvents: function(a) {
          var b = this._isFinished;
          if ((b || this._idle) && !this._finishedFlag) {
            var c = new d(this, this._currentTime, a);
            var e = this._finishHandlers.concat(this.onfinish ? [ this.onfinish ] : []);
            setTimeout(function() {
              e.forEach(function(a) {
                a.call(c.target, c);
              });
            }, 0);
          }
          this._finishedFlag = b;
        },
        _tick: function(a) {
          if (!this._idle && !this._paused) {
            if (null == this._startTime) {
              this.startTime = a - this._currentTime / this.playbackRate;
            } else {
              if (!this._isFinished) {
                this._tickCurrentTime((a - this._startTime) * this.playbackRate);
              }
            }
          }
          this._currentTimePending = false;
          this._fireEvents(a);
          return !this._idle && (this._inEffect || !this._finishedFlag);
        }
      };
      if (false) {
        c.webAnimations1Animation = b.Animation;
      }
    })(c, d, f);
    (function(a, b, c) {
      var d = window.requestAnimationFrame;
      var e = [];
      var f = 0;
      window.requestAnimationFrame = function(a) {
        var b = f++;
        if (0 == e.length && !false) {
          d(g);
        }
        e.push([ b, a ]);
        return b;
      };
      window.cancelAnimationFrame = function(a) {
        e.forEach(function(b) {
          if (b[0] == a) {
            b[1] = function() {};
          }
        });
      };
      function g(a) {
        var b = e;
        e = [];
        if (a < t.currentTime) {
          a = t.currentTime;
        }
        s(a);
        b.forEach(function(b) {
          b[1](a);
        });
        if (n) {
          s(a);
        }
        p();
        j = void 0;
      }
      function h(a, b) {
        return a._sequenceNumber - b._sequenceNumber;
      }
      function i() {
        this._animations = [];
        this.currentTime = window.performance && performance.now ? performance.now() : 0;
      }
      i.prototype = {
        _play: function(c) {
          c._timing = a.normalizeTimingInput(c.timing);
          var d = new b.Animation(c);
          d._idle = false;
          d._timeline = this;
          this._animations.push(d);
          b.restart();
          b.invalidateEffects();
          return d;
        }
      };
      var j = void 0;
      if (false) {
        var k = function() {
          return t.currentTime;
        };
      } else {
        var k = function() {
          if (void 0 == j) {
            j = performance.now();
          }
          return j;
        };
      }
      var l = false;
      var m = false;
      b.restart = function() {
        if (!l) {
          l = true;
          requestAnimationFrame(function() {});
          m = true;
        }
        return m;
      };
      var n = false;
      b.invalidateEffects = function() {
        n = true;
      };
      var o = [];
      function p() {
        o.forEach(function(a) {
          a();
        });
        o.length = 0;
      }
      var q = 1e3 / 60;
      var r = window.getComputedStyle;
      Object.defineProperty(window, "getComputedStyle", {
        configurable: true,
        enumerable: true,
        value: function() {
          if (n) {
            var a = k();
            if (a - t.currentTime > 0) {
              t.currentTime += q * (Math.floor((a - t.currentTime) / q) + 1);
            }
            s(t.currentTime);
          }
          p();
          return r.apply(this, arguments);
        }
      });
      function s(a) {
        m = false;
        var c = b.timeline;
        c.currentTime = a;
        c._animations.sort(h);
        l = false;
        var d = c._animations;
        c._animations = [];
        var e = [];
        var f = [];
        d = d.filter(function(b) {
          b._inTimeline = b._tick(a);
          if (!b._inEffect) {
            e.push(b._effect);
          } else {
            f.push(b._effect);
          }
          if (!b._isFinished && !b._paused && !b._idle) {
            l = true;
          }
          return b._inTimeline;
        });
        o.push.apply(o, e);
        o.push.apply(o, f);
        c._animations.push.apply(c._animations, d);
        n = false;
        if (l) {
          requestAnimationFrame(function() {});
        }
      }
      if (false) {
        c.tick = function(a) {
          t.currentTime = a;
          g(a);
        };
        c.isTicking = function() {
          return l;
        };
        c.setTicking = function(a) {
          l = a;
        };
      }
      var t = new i();
      b.timeline = t;
    })(c, d, f);
    (function(a) {
      function b(a, b) {
        var c = a.exec(b);
        if (c) {
          c = a.ignoreCase ? c[0].toLowerCase() : c[0];
          return [ c, b.substr(c.length) ];
        }
      }
      function c(a, b) {
        b = b.replace(/^\s*/, "");
        var c = a(b);
        if (c) {
          return [ c[0], c[1].replace(/^\s*/, "") ];
        }
      }
      function d(a, d, e) {
        a = c.bind(null, a);
        var f = [];
        while (true) {
          var g = a(e);
          if (!g) {
            return [ f, e ];
          }
          f.push(g[0]);
          e = g[1];
          g = b(d, e);
          if (!g || "" == g[1]) {
            return [ f, e ];
          }
          e = g[1];
        }
      }
      function e(a, b) {
        var c = 0;
        for (var d = 0; d < b.length; d++) {
          if (/\s|,/.test(b[d]) && 0 == c) {
            break;
          } else {
            if ("(" == b[d]) {
              c++;
            } else {
              if (")" == b[d]) {
                c--;
                if (0 == c) {
                  d++;
                }
                if (c <= 0) {
                  break;
                }
              }
            }
          }
        }
        var e = a(b.substr(0, d));
        return void 0 == e ? void 0 : [ e, b.substr(d) ];
      }
      function f(a, b) {
        var c = a;
        var d = b;
        while (c && d) {
          c > d ? c %= d : d %= c;
        }
        c = a * b / (c + d);
        return c;
      }
      function g(a) {
        return function(b) {
          var c = a(b);
          if (c) {
            c[0] = void 0;
          }
          return c;
        };
      }
      function h(a, b) {
        return function(c) {
          var d = a(c);
          if (d) {
            return d;
          }
          return [ b, c ];
        };
      }
      function i(b, c) {
        var d = [];
        for (var e = 0; e < b.length; e++) {
          var f = a.consumeTrimmed(b[e], c);
          if (!f || "" == f[0]) {
            return;
          }
          if (void 0 !== f[0]) {
            d.push(f[0]);
          }
          c = f[1];
        }
        if ("" == c) {
          return d;
        }
      }
      function j(a, b, c, d, e) {
        var g = [];
        var h = [];
        var i = [];
        var j = f(d.length, e.length);
        for (var k = 0; k < j; k++) {
          var l = b(d[k % d.length], e[k % e.length]);
          if (!l) {
            return;
          }
          g.push(l[0]);
          h.push(l[1]);
          i.push(l[2]);
        }
        return [ g, h, function(b) {
          var d = b.map(function(a, b) {
            return i[b](a);
          }).join(c);
          return a ? a(d) : d;
        } ];
      }
      function k(a, b, c) {
        var d = [];
        var e = [];
        var f = [];
        var g = 0;
        for (var h = 0; h < c.length; h++) {
          if ("function" == typeof c[h]) {
            var i = c[h](a[g], b[g++]);
            d.push(i[0]);
            e.push(i[1]);
            f.push(i[2]);
          } else {
            (function(a) {
              d.push(false);
              e.push(false);
              f.push(function() {
                return c[a];
              });
            })(h);
          }
        }
        return [ d, e, function(a) {
          var b = "";
          for (var c = 0; c < a.length; c++) {
            b += f[c](a[c]);
          }
          return b;
        } ];
      }
      a.consumeToken = b;
      a.consumeTrimmed = c;
      a.consumeRepeated = d;
      a.consumeParenthesised = e;
      a.ignore = g;
      a.optional = h;
      a.consumeList = i;
      a.mergeNestedRepeated = j.bind(null, null);
      a.mergeWrappedNestedRepeated = j;
      a.mergeList = k;
    })(d);
    (function(a) {
      function b(b) {
        var c = {
          inset: false,
          lengths: [],
          color: null
        };
        function d(b) {
          var d = a.consumeToken(/^inset/i, b);
          if (d) {
            c.inset = true;
            return d;
          }
          var d = a.consumeLengthOrPercent(b);
          if (d) {
            c.lengths.push(d[0]);
            return d;
          }
          var d = a.consumeColor(b);
          if (d) {
            c.color = d[0];
            return d;
          }
        }
        var e = a.consumeRepeated(d, /^/, b);
        if (e && e[0].length) {
          return [ c, e[1] ];
        }
      }
      function c(c) {
        var d = a.consumeRepeated(b, /^,/, c);
        if (d && "" == d[1]) {
          return d[0];
        }
      }
      function d(b, c) {
        while (b.lengths.length < Math.max(b.lengths.length, c.lengths.length)) {
          b.lengths.push({
            px: 0
          });
        }
        while (c.lengths.length < Math.max(b.lengths.length, c.lengths.length)) {
          c.lengths.push({
            px: 0
          });
        }
        if (b.inset != c.inset || !!b.color != !!c.color) {
          return;
        }
        var d = [];
        var e;
        var f = [ [], 0 ];
        var g = [ [], 0 ];
        for (var h = 0; h < b.lengths.length; h++) {
          var i = a.mergeDimensions(b.lengths[h], c.lengths[h], 2 == h);
          f[0].push(i[0]);
          g[0].push(i[1]);
          d.push(i[2]);
        }
        if (b.color && c.color) {
          var j = a.mergeColors(b.color, c.color);
          f[1] = j[0];
          g[1] = j[1];
          e = j[2];
        }
        return [ f, g, function(a) {
          var c = b.inset ? "inset " : " ";
          for (var f = 0; f < d.length; f++) {
            c += d[f](a[0][f]) + " ";
          }
          if (e) {
            c += e(a[1]);
          }
          return c;
        } ];
      }
      function e(b, c, d, e) {
        var f = [];
        var g = [];
        function h(a) {
          return {
            inset: a,
            color: [ 0, 0, 0, 0 ],
            lengths: [ {
              px: 0
            }, {
              px: 0
            }, {
              px: 0
            }, {
              px: 0
            } ]
          };
        }
        for (var i = 0; i < d.length || i < e.length; i++) {
          var j = d[i] || h(e[i].inset);
          var k = e[i] || h(d[i].inset);
          f.push(j);
          g.push(k);
        }
        return a.mergeNestedRepeated(b, c, f, g);
      }
      var f = e.bind(null, d, ", ");
      a.addPropertiesHandler(c, f, [ "box-shadow", "text-shadow" ]);
    })(d);
    (function(a, b) {
      function c(a) {
        return a.toFixed(3).replace(".000", "");
      }
      function d(a, b, c) {
        return Math.min(b, Math.max(a, c));
      }
      function e(a) {
        if (/^\s*[-+]?(\d*\.)?\d+\s*$/.test(a)) {
          return Number(a);
        }
      }
      function f(a, b) {
        return [ a, b, c ];
      }
      function g(a, b) {
        if (0 == a) {
          return;
        }
        return i(0, 1 / 0)(a, b);
      }
      function h(a, b) {
        return [ a, b, function(a) {
          return Math.round(d(1, 1 / 0, a));
        } ];
      }
      function i(a, b) {
        return function(e, f) {
          return [ e, f, function(e) {
            return c(d(a, b, e));
          } ];
        };
      }
      function j(a, b) {
        return [ a, b, Math.round ];
      }
      a.clamp = d;
      a.addPropertiesHandler(e, i(0, 1 / 0), [ "border-image-width", "line-height" ]);
      a.addPropertiesHandler(e, i(0, 1), [ "opacity", "shape-image-threshold" ]);
      a.addPropertiesHandler(e, g, [ "flex-grow", "flex-shrink" ]);
      a.addPropertiesHandler(e, h, [ "orphans", "widows" ]);
      a.addPropertiesHandler(e, j, [ "z-index" ]);
      a.parseNumber = e;
      a.mergeNumbers = f;
      a.numberToString = c;
    })(d, f);
    (function(a, b) {
      function c(a, b) {
        if ("visible" != a && "visible" != b) {
          return;
        }
        return [ 0, 1, function(c) {
          if (c <= 0) {
            return a;
          }
          if (c >= 1) {
            return b;
          }
          return "visible";
        } ];
      }
      a.addPropertiesHandler(String, c, [ "visibility" ]);
    })(d);
    (function(a, b) {
      var c = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
      c.width = c.height = 1;
      var d = c.getContext("2d");
      function e(a) {
        a = a.trim();
        d.fillStyle = "#000";
        d.fillStyle = a;
        var b = d.fillStyle;
        d.fillStyle = "#fff";
        d.fillStyle = a;
        if (b != d.fillStyle) {
          return;
        }
        d.fillRect(0, 0, 1, 1);
        var c = d.getImageData(0, 0, 1, 1).data;
        d.clearRect(0, 0, 1, 1);
        var e = c[3] / 255;
        return [ c[0] * e, c[1] * e, c[2] * e, e ];
      }
      function f(b, c) {
        return [ b, c, function(b) {
          function c(a) {
            return Math.max(0, Math.min(255, a));
          }
          if (b[3]) {
            for (var d = 0; d < 3; d++) {
              b[d] = Math.round(c(b[d] / b[3]));
            }
          }
          b[3] = a.numberToString(a.clamp(0, 1, b[3]));
          return "rgba(" + b.join(",") + ")";
        } ];
      }
      a.addPropertiesHandler(e, f, [ "background-color", "border-bottom-color", "border-left-color", "border-right-color", "border-top-color", "color", "outline-color", "text-decoration-color" ]);
      a.consumeColor = a.consumeParenthesised.bind(null, e);
      a.mergeColors = f;
      if (false) {
        b.parseColor = e;
      }
    })(d, f);
    (function(a, b) {
      function c(a, b) {
        b = b.trim().toLowerCase();
        if ("0" == b && "px".search(a) >= 0) {
          return {
            px: 0
          };
        }
        if (!/^[^(]*$|^calc/.test(b)) {
          return;
        }
        b = b.replace(/calc\(/g, "(");
        var c = {};
        b = b.replace(a, function(a) {
          c[a] = null;
          return "U" + a;
        });
        var d = "U(" + a.source + ")";
        var e = b.replace(/[-+]?(\d*\.)?\d+/g, "N").replace(new RegExp("N" + d, "g"), "D").replace(/\s[+-]\s/g, "O").replace(/\s/g, "");
        var f = [ /N\*(D)/g, /(N|D)[*\/]N/g, /(N|D)O\1/g, /\((N|D)\)/g ];
        var g = 0;
        while (g < f.length) {
          if (f[g].test(e)) {
            e = e.replace(f[g], "$1");
            g = 0;
          } else {
            g++;
          }
        }
        if ("D" != e) {
          return;
        }
        for (var h in c) {
          var i = eval(b.replace(new RegExp("U" + h, "g"), "").replace(new RegExp(d, "g"), "*0"));
          if (!isFinite(i)) {
            return;
          }
          c[h] = i;
        }
        return c;
      }
      function d(a, b) {
        return e(a, b, true);
      }
      function e(b, c, d) {
        var e = [], f;
        for (f in b) {
          e.push(f);
        }
        for (f in c) {
          if (e.indexOf(f) < 0) {
            e.push(f);
          }
        }
        b = e.map(function(a) {
          return b[a] || 0;
        });
        c = e.map(function(a) {
          return c[a] || 0;
        });
        return [ b, c, function(b) {
          var c = b.map(function(c, f) {
            if (1 == b.length && d) {
              c = Math.max(c, 0);
            }
            return a.numberToString(c) + e[f];
          }).join(" + ");
          return b.length > 1 ? "calc(" + c + ")" : c;
        } ];
      }
      var f = "px|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc";
      var g = c.bind(null, new RegExp(f, "g"));
      var h = c.bind(null, new RegExp(f + "|%", "g"));
      var i = c.bind(null, /deg|rad|grad|turn/g);
      a.parseLength = g;
      a.parseLengthOrPercent = h;
      a.consumeLengthOrPercent = a.consumeParenthesised.bind(null, h);
      a.parseAngle = i;
      a.mergeDimensions = e;
      var j = a.consumeParenthesised.bind(null, g);
      var k = a.consumeRepeated.bind(void 0, j, /^/);
      var l = a.consumeRepeated.bind(void 0, k, /^,/);
      a.consumeSizePairList = l;
      var m = function(a) {
        var b = l(a);
        if (b && "" == b[1]) {
          return b[0];
        }
      };
      var n = a.mergeNestedRepeated.bind(void 0, d, " ");
      var o = a.mergeNestedRepeated.bind(void 0, n, ",");
      a.mergeNonNegativeSizePair = n;
      a.addPropertiesHandler(m, o, [ "background-size" ]);
      a.addPropertiesHandler(h, d, [ "border-bottom-width", "border-image-width", "border-left-width", "border-right-width", "border-top-width", "flex-basis", "font-size", "height", "line-height", "max-height", "max-width", "outline-width", "width" ]);
      a.addPropertiesHandler(h, e, [ "border-bottom-left-radius", "border-bottom-right-radius", "border-top-left-radius", "border-top-right-radius", "bottom", "left", "letter-spacing", "margin-bottom", "margin-left", "margin-right", "margin-top", "min-height", "min-width", "outline-offset", "padding-bottom", "padding-left", "padding-right", "padding-top", "perspective", "right", "shape-margin", "text-indent", "top", "vertical-align", "word-spacing" ]);
    })(d, f);
    (function(a, b) {
      function c(b) {
        return a.consumeLengthOrPercent(b) || a.consumeToken(/^auto/, b);
      }
      function d(b) {
        var d = a.consumeList([ a.ignore(a.consumeToken.bind(null, /^rect/)), a.ignore(a.consumeToken.bind(null, /^\(/)), a.consumeRepeated.bind(null, c, /^,/), a.ignore(a.consumeToken.bind(null, /^\)/)) ], b);
        if (d && 4 == d[0].length) {
          return d[0];
        }
      }
      function e(b, c) {
        if ("auto" == b || "auto" == c) {
          return [ true, false, function(d) {
            var e = d ? b : c;
            if ("auto" == e) {
              return "auto";
            }
            var f = a.mergeDimensions(e, e);
            return f[2](f[0]);
          } ];
        }
        return a.mergeDimensions(b, c);
      }
      function f(a) {
        return "rect(" + a + ")";
      }
      var g = a.mergeWrappedNestedRepeated.bind(null, f, e, ", ");
      a.parseBox = d;
      a.mergeBoxes = g;
      a.addPropertiesHandler(d, g, [ "clip" ]);
    })(d, f);
    (function(a, b) {
      var c = null;
      function d(a) {
        return function(b) {
          var d = 0;
          return a.map(function(a) {
            return a === c ? b[d++] : a;
          });
        };
      }
      function e(a) {
        return a;
      }
      var f = {
        px: 0
      };
      var g = {
        deg: 0
      };
      var h = {
        matrix: [ "NNNNNN", [ c, c, 0, 0, c, c, 0, 0, 0, 0, 1, 0, c, c, 0, 1 ], e ],
        matrix3d: [ "NNNNNNNNNNNNNNNN", e ],
        rotate: [ "A" ],
        rotatex: [ "A" ],
        rotatey: [ "A" ],
        rotatez: [ "A" ],
        rotate3d: [ "NNNA" ],
        perspective: [ "L" ],
        scale: [ "Nn", d([ c, c, 1 ]), e ],
        scalex: [ "N", d([ c, 1, 1 ]), d([ c, 1 ]) ],
        scaley: [ "N", d([ 1, c, 1 ]), d([ 1, c ]) ],
        scalez: [ "N", d([ 1, 1, c ]) ],
        scale3d: [ "NNN", e ],
        skew: [ "Aa", null, e ],
        skewx: [ "A", null, d([ c, g ]) ],
        skewy: [ "A", null, d([ g, c ]) ],
        translate: [ "Tt", d([ c, c, f ]), e ],
        translatex: [ "T", d([ c, f, f ]), d([ c, f ]) ],
        translatey: [ "T", d([ f, c, f ]), d([ f, c ]) ],
        translatez: [ "L", d([ f, f, c ]) ],
        translate3d: [ "TTL", e ]
      };
      function i(b) {
        b = b.toLowerCase().trim();
        if ("none" == b) {
          return [];
        }
        var c = /\s*(\w+)\(([^)]*)\)/g;
        var d = [];
        var e;
        var i = 0;
        while (e = c.exec(b)) {
          if (e.index != i) {
            return;
          }
          i = e.index + e[0].length;
          var j = e[1];
          var k = h[j];
          if (!k) {
            return;
          }
          var l = e[2].split(",");
          var m = k[0];
          if (m.length < l.length) {
            return;
          }
          var n = [];
          for (var o = 0; o < m.length; o++) {
            var p = l[o];
            var q = m[o];
            var r;
            if (!p) {
              r = {
                a: g,
                n: n[0],
                t: f
              }[q];
            } else {
              r = {
                A: function(b) {
                  return "0" == b.trim() ? g : a.parseAngle(b);
                },
                N: a.parseNumber,
                T: a.parseLengthOrPercent,
                L: a.parseLength
              }[q.toUpperCase()](p);
            }
            if (void 0 === r) {
              return;
            }
            n.push(r);
          }
          d.push({
            t: j,
            d: n
          });
          if (c.lastIndex == b.length) {
            return d;
          }
        }
      }
      function j(a) {
        return a.toFixed(6).replace(".000000", "");
      }
      function k(b, c) {
        if (b.decompositionPair !== c) {
          b.decompositionPair = c;
          var d = a.makeMatrixDecomposition(b);
        }
        if (c.decompositionPair !== b) {
          c.decompositionPair = b;
          var e = a.makeMatrixDecomposition(c);
        }
        if (null == d[0] || null == e[0]) {
          return [ [ false ], [ true ], function(a) {
            return a ? c[0].d : b[0].d;
          } ];
        }
        d[0].push(0);
        e[0].push(1);
        return [ d, e, function(b) {
          var c = a.quat(d[0][3], e[0][3], b[5]);
          var f = a.composeMatrix(b[0], b[1], b[2], c, b[4]);
          var g = f.map(j).join(",");
          return g;
        } ];
      }
      function l(a) {
        return a.replace(/[xy]/, "");
      }
      function m(a) {
        return a.replace(/(x|y|z|3d)?$/, "3d");
      }
      function n(b, c) {
        var d = a.makeMatrixDecomposition && true;
        var e = false;
        if (!b.length || !c.length) {
          if (!b.length) {
            e = true;
            b = c;
            c = [];
          }
          for (var f = 0; f < b.length; f++) {
            var g = b[f].t;
            var i = b[f].d;
            var j = "scale" == g.substr(0, 5) ? 1 : 0;
            c.push({
              t: g,
              d: i.map(function(a) {
                if ("number" == typeof a) {
                  return j;
                }
                var b = {};
                for (var c in a) {
                  b[c] = j;
                }
                return b;
              })
            });
          }
        }
        var n = function(a, b) {
          return "perspective" == a && "perspective" == b || ("matrix" == a || "matrix3d" == a) && ("matrix" == b || "matrix3d" == b);
        };
        var o = [];
        var p = [];
        var q = [];
        if (b.length != c.length) {
          if (!d) {
            return;
          }
          var r = k(b, c);
          o = [ r[0] ];
          p = [ r[1] ];
          q = [ [ "matrix", [ r[2] ] ] ];
        } else {
          for (var f = 0; f < b.length; f++) {
            var s = b[f].t;
            var t = c[f].t;
            var u = b[f].d;
            var v = c[f].d;
            var w = h[s];
            var x = h[t];
            var g;
            if (n(s, t)) {
              if (!d) {
                return;
              }
              var r = k([ b[f] ], [ c[f] ]);
              o.push(r[0]);
              p.push(r[1]);
              q.push([ "matrix", [ r[2] ] ]);
              continue;
            } else {
              if (s == t) {
                g = s;
              } else {
                if (w[2] && x[2] && l(s) == l(t)) {
                  g = l(s);
                  u = w[2](u);
                  v = x[2](v);
                } else {
                  if (w[1] && x[1] && m(s) == m(t)) {
                    g = m(s);
                    u = w[1](u);
                    v = x[1](v);
                  } else {
                    if (!d) {
                      return;
                    }
                    var r = k(b, c);
                    o = [ r[0] ];
                    p = [ r[1] ];
                    q = [ [ "matrix", [ r[2] ] ] ];
                    break;
                  }
                }
              }
            }
            var y = [];
            var z = [];
            var A = [];
            for (var B = 0; B < u.length; B++) {
              var C = "number" == typeof u[B] ? a.mergeNumbers : a.mergeDimensions;
              var r = C(u[B], v[B]);
              y[B] = r[0];
              z[B] = r[1];
              A.push(r[2]);
            }
            o.push(y);
            p.push(z);
            q.push([ g, A ]);
          }
        }
        if (e) {
          var D = o;
          o = p;
          p = D;
        }
        return [ o, p, function(a) {
          return a.map(function(a, b) {
            var c = a.map(function(a, c) {
              return q[b][1][c](a);
            }).join(",");
            if ("matrix" == q[b][0] && 16 == c.split(",").length) {
              q[b][0] = "matrix3d";
            }
            return q[b][0] + "(" + c + ")";
          }).join(" ");
        } ];
      }
      a.addPropertiesHandler(i, n, [ "transform" ]);
      if (false) {
        b.parseTransform = i;
      }
    })(d, f);
    (function(a, b) {
      var c = {};
      function d(a, b) {
        b.concat([ a ]).forEach(function(b) {
          if (b in document.documentElement.style) {
            c[a] = b;
          }
        });
      }
      d("transform", [ "webkitTransform", "msTransform" ]);
      d("transformOrigin", [ "webkitTransformOrigin" ]);
      d("perspective", [ "webkitPerspective" ]);
      d("perspectiveOrigin", [ "webkitPerspectiveOrigin" ]);
      a.propertyName = function(a) {
        return c[a] || a;
      };
    })(d, f);
  })();
  (function(a, b, c) {
    var d = window.requestAnimationFrame;
    window.requestAnimationFrame = function(a) {
      return d(function(b) {
        window.document.timeline._updateAnimationsPromises();
        a(b);
        window.document.timeline._updateAnimationsPromises();
      });
    };
    b.AnimationTimeline = function() {
      this._animations = [];
      this.currentTime = void 0;
    };
    b.AnimationTimeline.prototype = {
      getAnimations: function() {
        this._discardAnimations();
        return this._animations.slice();
      },
      _updateAnimationsPromises: function() {
        b.animationsWithPromises = b.animationsWithPromises.filter(function(a) {
          return a._updatePromises();
        });
      },
      _discardAnimations: function() {
        this._updateAnimationsPromises();
        this._animations = this._animations.filter(function(a) {
          return "finished" != a.playState && "idle" != a.playState;
        });
      },
      _play: function(a) {
        var c = new b.Animation(a, this);
        this._animations.push(c);
        b.restartWebAnimationsNextTick();
        c._updatePromises();
        c._animation.play();
        c._updatePromises();
        return c;
      },
      play: function(a) {
        if (a) {
          a.remove();
        }
        return this._play(a);
      }
    };
    var e = false;
    b.restartWebAnimationsNextTick = function() {
      if (!e) {
        e = true;
        requestAnimationFrame(f);
      }
    };
    function f(a) {
      var b = window.document.timeline;
      b.currentTime = a;
      b._discardAnimations();
      if (0 == b._animations.length) {
        e = false;
      } else {
        requestAnimationFrame(f);
      }
    }
    var g = new b.AnimationTimeline();
    b.timeline = g;
    try {
      Object.defineProperty(window.document, "timeline", {
        configurable: true,
        get: function() {
          return g;
        }
      });
    } catch (h) {}
    try {
      window.document.timeline = g;
    } catch (h) {}
  })(c, e, f);
  (function(a, b, c) {
    b.animationsWithPromises = [];
    b.Animation = function(b, c) {
      this.effect = b;
      if (b) {
        b._animation = this;
      }
      if (!c) {
        throw new Error("Animation with null timeline is not supported");
      }
      this._timeline = c;
      this._sequenceNumber = a.sequenceNumber++;
      this._holdTime = 0;
      this._paused = false;
      this._isGroup = false;
      this._animation = null;
      this._childAnimations = [];
      this._callback = null;
      this._oldPlayState = "idle";
      this._rebuildUnderlyingAnimation();
      this._animation.cancel();
      this._updatePromises();
    };
    b.Animation.prototype = {
      _updatePromises: function() {
        var a = this._oldPlayState;
        var b = this.playState;
        if (this._readyPromise && b !== a) {
          if ("idle" == b) {
            this._rejectReadyPromise();
            this._readyPromise = void 0;
          } else {
            if ("pending" == a) {
              this._resolveReadyPromise();
            } else {
              if ("pending" == b) {
                this._readyPromise = void 0;
              }
            }
          }
        }
        if (this._finishedPromise && b !== a) {
          if ("idle" == b) {
            this._rejectFinishedPromise();
            this._finishedPromise = void 0;
          } else {
            if ("finished" == b) {
              this._resolveFinishedPromise();
            } else {
              if ("finished" == a) {
                this._finishedPromise = void 0;
              }
            }
          }
        }
        this._oldPlayState = this.playState;
        return this._readyPromise || this._finishedPromise;
      },
      _rebuildUnderlyingAnimation: function() {
        this._updatePromises();
        var a;
        var c;
        var d;
        var e;
        var f = this._animation ? true : false;
        if (f) {
          a = this.playbackRate;
          c = this._paused;
          d = this.startTime;
          e = this.currentTime;
          this._animation.cancel();
          this._animation._wrapper = null;
          this._animation = null;
        }
        if (!this.effect || this.effect instanceof window.KeyframeEffect) {
          this._animation = b.newUnderlyingAnimationForKeyframeEffect(this.effect);
          b.bindAnimationForKeyframeEffect(this);
        }
        if (this.effect instanceof window.SequenceEffect || this.effect instanceof window.GroupEffect) {
          this._animation = b.newUnderlyingAnimationForGroup(this.effect);
          b.bindAnimationForGroup(this);
        }
        if (this.effect && this.effect._onsample) {
          b.bindAnimationForCustomEffect(this);
        }
        if (f) {
          if (1 != a) {
            this.playbackRate = a;
          }
          if (null !== d) {
            this.startTime = d;
          } else {
            if (null !== e) {
              this.currentTime = e;
            } else {
              if (null !== this._holdTime) {
                this.currentTime = this._holdTime;
              }
            }
          }
          if (c) {
            this.pause();
          }
        }
        this._updatePromises();
      },
      _updateChildren: function() {
        if (!this.effect || "idle" == this.playState) {
          return;
        }
        var a = this.effect._timing.delay;
        this._childAnimations.forEach(function(c) {
          this._arrangeChildren(c, a);
          if (this.effect instanceof window.SequenceEffect) {
            a += b.groupChildDuration(c.effect);
          }
        }.bind(this));
      },
      _setExternalAnimation: function(a) {
        if (!this.effect || !this._isGroup) {
          return;
        }
        for (var b = 0; b < this.effect.children.length; b++) {
          this.effect.children[b]._animation = a;
          this._childAnimations[b]._setExternalAnimation(a);
        }
      },
      _constructChildAnimations: function() {
        if (!this.effect || !this._isGroup) {
          return;
        }
        var a = this.effect._timing.delay;
        this._removeChildAnimations();
        this.effect.children.forEach(function(c) {
          var d = window.document.timeline._play(c);
          this._childAnimations.push(d);
          d.playbackRate = this.playbackRate;
          if (this._paused) {
            d.pause();
          }
          c._animation = this.effect._animation;
          this._arrangeChildren(d, a);
          if (this.effect instanceof window.SequenceEffect) {
            a += b.groupChildDuration(c);
          }
        }.bind(this));
      },
      _arrangeChildren: function(a, b) {
        if (null === this.startTime) {
          a.currentTime = this.currentTime - b / this.playbackRate;
        } else {
          if (a.startTime !== this.startTime + b / this.playbackRate) {
            a.startTime = this.startTime + b / this.playbackRate;
          }
        }
      },
      get timeline() {
        return this._timeline;
      },
      get playState() {
        return this._animation ? this._animation.playState : "idle";
      },
      get finished() {
        if (!window.Promise) {
          console.warn("Animation Promises require JavaScript Promise constructor");
          return null;
        }
        if (!this._finishedPromise) {
          if (b.animationsWithPromises.indexOf(this) == -1) {
            b.animationsWithPromises.push(this);
          }
          this._finishedPromise = new Promise(function(a, b) {
            this._resolveFinishedPromise = function() {
              a(this);
            };
            this._rejectFinishedPromise = function() {
              b({
                type: DOMException.ABORT_ERR,
                name: "AbortError"
              });
            };
          }.bind(this));
          if ("finished" == this.playState) {
            this._resolveFinishedPromise();
          }
        }
        return this._finishedPromise;
      },
      get ready() {
        if (!window.Promise) {
          console.warn("Animation Promises require JavaScript Promise constructor");
          return null;
        }
        if (!this._readyPromise) {
          if (b.animationsWithPromises.indexOf(this) == -1) {
            b.animationsWithPromises.push(this);
          }
          this._readyPromise = new Promise(function(a, b) {
            this._resolveReadyPromise = function() {
              a(this);
            };
            this._rejectReadyPromise = function() {
              b({
                type: DOMException.ABORT_ERR,
                name: "AbortError"
              });
            };
          }.bind(this));
          if ("pending" !== this.playState) {
            this._resolveReadyPromise();
          }
        }
        return this._readyPromise;
      },
      get onfinish() {
        return this._onfinish;
      },
      set onfinish(a) {
        if ("function" == typeof a) {
          this._onfinish = a;
          this._animation.onfinish = function(b) {
            b.target = this;
            a.call(this, b);
          }.bind(this);
        } else {
          this._animation.onfinish = a;
          this.onfinish = this._animation.onfinish;
        }
      },
      get currentTime() {
        this._updatePromises();
        var a = this._animation.currentTime;
        this._updatePromises();
        return a;
      },
      set currentTime(a) {
        this._updatePromises();
        this._animation.currentTime = isFinite(a) ? a : Math.sign(a) * Number.MAX_VALUE;
        this._register();
        this._forEachChild(function(b, c) {
          b.currentTime = a - c;
        });
        this._updatePromises();
      },
      get startTime() {
        return this._animation.startTime;
      },
      set startTime(a) {
        this._updatePromises();
        this._animation.startTime = isFinite(a) ? a : Math.sign(a) * Number.MAX_VALUE;
        this._register();
        this._forEachChild(function(b, c) {
          b.startTime = a + c;
        });
        this._updatePromises();
      },
      get playbackRate() {
        return this._animation.playbackRate;
      },
      set playbackRate(a) {
        this._updatePromises();
        var b = this.currentTime;
        this._animation.playbackRate = a;
        this._forEachChild(function(b) {
          b.playbackRate = a;
        });
        if ("paused" != this.playState && "idle" != this.playState) {
          this.play();
        }
        if (null !== b) {
          this.currentTime = b;
        }
        this._updatePromises();
      },
      play: function() {
        this._updatePromises();
        this._paused = false;
        this._animation.play();
        if (this._timeline._animations.indexOf(this) == -1) {
          this._timeline._animations.push(this);
        }
        this._register();
        b.awaitStartTime(this);
        this._forEachChild(function(a) {
          var b = a.currentTime;
          a.play();
          a.currentTime = b;
        });
        this._updatePromises();
      },
      pause: function() {
        this._updatePromises();
        if (this.currentTime) {
          this._holdTime = this.currentTime;
        }
        this._animation.pause();
        this._register();
        this._forEachChild(function(a) {
          a.pause();
        });
        this._paused = true;
        this._updatePromises();
      },
      finish: function() {
        this._updatePromises();
        this._animation.finish();
        this._register();
        this._updatePromises();
      },
      cancel: function() {
        this._updatePromises();
        this._animation.cancel();
        this._register();
        this._removeChildAnimations();
        this._updatePromises();
      },
      reverse: function() {
        this._updatePromises();
        var a = this.currentTime;
        this._animation.reverse();
        this._forEachChild(function(a) {
          a.reverse();
        });
        if (null !== a) {
          this.currentTime = a;
        }
        this._updatePromises();
      },
      addEventListener: function(a, b) {
        var c = b;
        if ("function" == typeof b) {
          c = function(a) {
            a.target = this;
            b.call(this, a);
          }.bind(this);
          b._wrapper = c;
        }
        this._animation.addEventListener(a, c);
      },
      removeEventListener: function(a, b) {
        this._animation.removeEventListener(a, b && b._wrapper || b);
      },
      _removeChildAnimations: function() {
        while (this._childAnimations.length) {
          this._childAnimations.pop().cancel();
        }
      },
      _forEachChild: function(b) {
        var c = 0;
        if (this.effect.children && this._childAnimations.length < this.effect.children.length) {
          this._constructChildAnimations();
        }
        this._childAnimations.forEach(function(a) {
          b.call(this, a, c);
          if (this.effect instanceof window.SequenceEffect) {
            c += a.effect.activeDuration;
          }
        }.bind(this));
        if ("pending" == this.playState) {
          return;
        }
        var d = this.effect._timing;
        var e = this.currentTime;
        if (null !== e) {
          e = a.calculateTimeFraction(a.calculateActiveDuration(d), e, d);
        }
        if (null == e || isNaN(e)) {
          this._removeChildAnimations();
        }
      }
    };
    window.Animation = b.Animation;
    if (false) {
      c.webAnimationsNextAnimation = b.Animation;
    }
  })(c, e, f);
  (function(a, b, c) {
    var d = function(a) {
      a._animation = void 0;
      if (a instanceof window.SequenceEffect || a instanceof window.GroupEffect) {
        for (var b = 0; b < a.children.length; b++) {
          d(a.children[b]);
        }
      }
    };
    b.removeMulti = function(a) {
      var b = [];
      for (var c = 0; c < a.length; c++) {
        var e = a[c];
        if (e._parent) {
          if (b.indexOf(e._parent) == -1) {
            b.push(e._parent);
          }
          e._parent.children.splice(e._parent.children.indexOf(e), 1);
          e._parent = null;
          d(e);
        } else {
          if (e._animation && e._animation.effect == e) {
            e._animation.cancel();
            e._animation.effect = new KeyframeEffect(null, []);
            if (e._animation._callback) {
              e._animation._callback._animation = null;
            }
            e._animation._rebuildUnderlyingAnimation();
            d(e);
          }
        }
      }
      for (c = 0; c < b.length; c++) {
        b[c]._rebuild();
      }
    };
    function e(b) {
      this._frames = a.normalizeKeyframes(b);
    }
    b.KeyframeEffect = function(b, c, d) {
      this.target = b;
      this._parent = null;
      d = a.numericTimingToObject(d);
      this._timingInput = a.cloneTimingInput(d);
      this._timing = a.normalizeTimingInput(d);
      this.timing = a.makeTiming(d, false, this);
      this.timing._effect = this;
      if ("function" == typeof c) {
        a.deprecated("Custom KeyframeEffect", "2015-06-22", "Use KeyframeEffect.onsample instead.");
        this._normalizedKeyframes = c;
      } else {
        this._normalizedKeyframes = new e(c);
      }
      this._keyframes = c;
      this.activeDuration = a.calculateActiveDuration(this._timing);
      return this;
    };
    b.KeyframeEffect.prototype = {
      getFrames: function() {
        if ("function" == typeof this._normalizedKeyframes) {
          return this._normalizedKeyframes;
        }
        return this._normalizedKeyframes._frames;
      },
      set onsample(a) {
        if ("function" == typeof this.getFrames()) {
          throw new Error("Setting onsample on custom effect KeyframeEffect is not supported.");
        }
        this._onsample = a;
        if (this._animation) {
          this._animation._rebuildUnderlyingAnimation();
        }
      },
      get parent() {
        return this._parent;
      },
      clone: function() {
        if ("function" == typeof this.getFrames()) {
          throw new Error("Cloning custom effects is not supported.");
        }
        var b = new KeyframeEffect(this.target, [], a.cloneTimingInput(this._timingInput));
        b._normalizedKeyframes = this._normalizedKeyframes;
        b._keyframes = this._keyframes;
        return b;
      },
      remove: function() {
        b.removeMulti([ this ]);
      }
    };
    var f = Element.prototype.animate;
    Element.prototype.animate = function(a, c) {
      return b.timeline._play(new b.KeyframeEffect(this, a, c));
    };
    var g = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
    b.newUnderlyingAnimationForKeyframeEffect = function(a) {
      if (a) {
        var b = a.target || g;
        var c = a._keyframes;
        if ("function" == typeof c) {
          c = [];
        }
        var d = a._timingInput;
      } else {
        var b = g;
        var c = [];
        var d = 0;
      }
      return f.apply(b, [ c, d ]);
    };
    b.bindAnimationForKeyframeEffect = function(a) {
      if (a.effect && "function" == typeof a.effect._normalizedKeyframes) {
        b.bindAnimationForCustomEffect(a);
      }
    };
    var h = [];
    b.awaitStartTime = function(a) {
      if (null !== a.startTime || !a._isGroup) {
        return;
      }
      if (0 == h.length) {
        requestAnimationFrame(i);
      }
      h.push(a);
    };
    function i() {
      var a = false;
      while (h.length) {
        var b = h.shift();
        b._updateChildren();
        a = true;
      }
      return a;
    }
    var j = window.getComputedStyle;
    Object.defineProperty(window, "getComputedStyle", {
      configurable: true,
      enumerable: true,
      value: function() {
        window.document.timeline._updateAnimationsPromises();
        var a = j.apply(this, arguments);
        if (i()) {
          a = j.apply(this, arguments);
        }
        window.document.timeline._updateAnimationsPromises();
        return a;
      }
    });
    window.KeyframeEffect = b.KeyframeEffect;
    window.Element.prototype.getAnimations = function() {
      return document.timeline.getAnimations().filter(function(a) {
        return null !== a.effect && a.effect.target == this;
      }.bind(this));
    };
  })(c, e, f);
  (function(a, b, c) {
    var d = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
    var e = 0;
    b.bindAnimationForCustomEffect = function(b) {
      var c = b.effect.target;
      var d;
      var f = "function" == typeof b.effect.getFrames();
      if (f) {
        d = b.effect.getFrames();
      } else {
        d = b.effect._onsample;
      }
      var g = b.effect.timing;
      var i = null;
      g = a.normalizeTimingInput(g);
      var j = function() {
        var e = j._animation ? j._animation.currentTime : null;
        if (null !== e) {
          e = a.calculateTimeFraction(a.calculateActiveDuration(g), e, g);
          if (isNaN(e)) {
            e = null;
          }
        }
        if (e !== i) {
          if (f) {
            d(e, c, b.effect);
          } else {
            d(e, b.effect, b.effect._animation);
          }
        }
        i = e;
      };
      j._animation = b;
      j._registered = false;
      j._sequenceNumber = e++;
      b._callback = j;
      h(j);
    };
    var f = [];
    var g = false;
    function h(a) {
      if (a._registered) {
        return;
      }
      a._registered = true;
      f.push(a);
      if (!g) {
        g = true;
        requestAnimationFrame(i);
      }
    }
    function i(a) {
      var b = f;
      f = [];
      b.sort(function(a, b) {
        return a._sequenceNumber - b._sequenceNumber;
      });
      b = b.filter(function(a) {
        a();
        var b = a._animation ? a._animation.playState : "idle";
        if ("running" != b && "pending" != b) {
          a._registered = false;
        }
        return a._registered;
      });
      f.push.apply(f, b);
      if (f.length) {
        g = true;
        requestAnimationFrame(i);
      } else {
        g = false;
      }
    }
    b.Animation.prototype._register = function() {
      if (this._callback) {
        h(this._callback);
      }
    };
  })(c, e, f);
  (function(a, b, c) {
    function d(a) {
      return a._timing.delay + a.activeDuration + a._timing.endDelay;
    }
    function e(b, c) {
      this._parent = null;
      this.children = b || [];
      this._reparent(this.children);
      c = a.numericTimingToObject(c);
      this._timingInput = a.cloneTimingInput(c);
      this._timing = a.normalizeTimingInput(c, true);
      this.timing = a.makeTiming(c, true, this);
      this.timing._effect = this;
      if ("auto" === this._timing.duration) {
        this._timing.duration = this.activeDuration;
      }
    }
    window.SequenceEffect = function() {
      e.apply(this, arguments);
    };
    window.GroupEffect = function() {
      e.apply(this, arguments);
    };
    e.prototype = {
      _isAncestor: function(a) {
        var b = this;
        while (null !== b) {
          if (b == a) {
            return true;
          }
          b = b._parent;
        }
        return false;
      },
      _rebuild: function() {
        var a = this;
        while (a) {
          if ("auto" === a.timing.duration) {
            a._timing.duration = a.activeDuration;
          }
          a = a._parent;
        }
        if (this._animation) {
          this._animation._rebuildUnderlyingAnimation();
        }
      },
      _reparent: function(a) {
        b.removeMulti(a);
        for (var c = 0; c < a.length; c++) {
          a[c]._parent = this;
        }
      },
      _putChild: function(a, b) {
        var c = b ? "Cannot append an ancestor or self" : "Cannot prepend an ancestor or self";
        for (var d = 0; d < a.length; d++) {
          if (this._isAncestor(a[d])) {
            throw {
              type: DOMException.HIERARCHY_REQUEST_ERR,
              name: "HierarchyRequestError",
              message: c
            };
          }
        }
        var e = [];
        for (var d = 0; d < a.length; d++) {
          b ? this.children.push(a[d]) : this.children.unshift(a[d]);
        }
        this._reparent(a);
        this._rebuild();
      },
      append: function() {
        this._putChild(arguments, true);
      },
      prepend: function() {
        this._putChild(arguments, false);
      },
      get parent() {
        return this._parent;
      },
      get firstChild() {
        return this.children.length ? this.children[0] : null;
      },
      get lastChild() {
        return this.children.length ? this.children[this.children.length - 1] : null;
      },
      clone: function() {
        var b = a.cloneTimingInput(this._timingInput);
        var c = [];
        for (var d = 0; d < this.children.length; d++) {
          c.push(this.children[d].clone());
        }
        return this instanceof GroupEffect ? new GroupEffect(c, b) : new SequenceEffect(c, b);
      },
      remove: function() {
        b.removeMulti([ this ]);
      }
    };
    window.SequenceEffect.prototype = Object.create(e.prototype);
    Object.defineProperty(window.SequenceEffect.prototype, "activeDuration", {
      get: function() {
        var a = 0;
        this.children.forEach(function(b) {
          a += d(b);
        });
        return Math.max(a, 0);
      }
    });
    window.GroupEffect.prototype = Object.create(e.prototype);
    Object.defineProperty(window.GroupEffect.prototype, "activeDuration", {
      get: function() {
        var a = 0;
        this.children.forEach(function(b) {
          a = Math.max(a, d(b));
        });
        return a;
      }
    });
    b.newUnderlyingAnimationForGroup = function(c) {
      var d;
      var e = null;
      var f = function(b) {
        var c = d._wrapper;
        if (!c) {
          return;
        }
        if ("pending" == c.playState) {
          return;
        }
        if (!c.effect) {
          return;
        }
        if (null == b) {
          c._removeChildAnimations();
          return;
        }
        if (0 == b && c.playbackRate < 0) {
          if (!e) {
            e = a.normalizeTimingInput(c.effect.timing);
          }
          b = a.calculateTimeFraction(a.calculateActiveDuration(e), -1, e);
          if (isNaN(b) || null == b) {
            c._forEachChild(function(a) {
              a.currentTime = -1;
            });
            c._removeChildAnimations();
            return;
          }
        }
      };
      var g = new KeyframeEffect(null, [], c._timing);
      g.onsample = f;
      d = b.timeline._play(g);
      return d;
    };
    b.bindAnimationForGroup = function(a) {
      a._animation._wrapper = a;
      a._isGroup = true;
      b.awaitStartTime(a);
      a._constructChildAnimations();
      a._setExternalAnimation(a);
    };
    b.groupChildDuration = d;
  })(c, e, f);
})({}, function() {
  return this;
}());
//# sourceMappingURL=web-animations-next-lite.min.js.map