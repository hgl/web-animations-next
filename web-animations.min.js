// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
//     You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//     See the License for the specific language governing permissions and
// limitations under the License.

(function(a, b) {
  b["true"] = a;
  (function() {
    if (document.documentElement.animate) {
      var a = document.documentElement.animate([], 0);
      var b = true;
      if (a) {
        b = false;
        "play|currentTime|pause|reverse|playbackRate|cancel|finish|startTime|playState".split("|").forEach(function(c) {
          if (void 0 === a[c]) {
            b = true;
          }
        });
      }
      if (!b) {
        return;
      }
    }
    var c = {};
    var d = {};
    var e = {};
    if (!false) {
      var f = null;
    }
    (function(a, b) {
      var c = "backwards|forwards|both|none".split("|");
      var d = "reverse|alternate|alternate-reverse".split("|");
      function e(a) {
        if ("number" == typeof a) {
          return a;
        }
        var b = {};
        for (var c in a) {
          b[c] = a[c];
        }
        return b;
      }
      function f(b, e) {
        var f = {
          delay: 0,
          endDelay: 0,
          fill: e ? "both" : "none",
          iterationStart: 0,
          iterations: 1,
          duration: e ? "auto" : 0,
          playbackRate: 1,
          direction: "normal",
          easing: "linear"
        };
        if ("number" == typeof b && !isNaN(b)) {
          f.duration = b;
        } else {
          if (void 0 !== b) {
            Object.getOwnPropertyNames(b).forEach(function(e) {
              if ("auto" != b[e]) {
                if ("number" == typeof f[e] || "duration" == e) {
                  if ("number" != typeof b[e] || isNaN(b[e])) {
                    return;
                  }
                }
                if ("fill" == e && c.indexOf(b[e]) == -1) {
                  return;
                }
                if ("direction" == e && d.indexOf(b[e]) == -1) {
                  return;
                }
                if ("playbackRate" == e && 1 !== b[e] && a.isDeprecated("AnimationEffectTiming.playbackRate", "2014-11-28", "Use Animation.playbackRate instead.")) {
                  return;
                }
                f[e] = b[e];
              }
            });
          }
        }
        return f;
      }
      function g(a, b) {
        var c = f(a, b);
        c.easing = r(c.easing);
        return c;
      }
      function h(a, b, c, d) {
        if (a < 0 || a > 1 || c < 0 || c > 1) {
          return q;
        }
        return function(e) {
          if (0 == e || 1 == e) {
            return e;
          }
          var f = 0, g = 1;
          while (1) {
            var h = (f + g) / 2;
            function i(a, b, c) {
              return 3 * a * (1 - c) * (1 - c) * c + 3 * b * (1 - c) * c * c + c * c * c;
            }
            var j = i(a, c, h);
            if (Math.abs(e - j) < .001) {
              return i(b, d, h);
            }
            if (j < e) {
              f = h;
            } else {
              g = h;
            }
          }
        };
      }
      var i = 1;
      var j = .5;
      var k = 0;
      function l(a, b) {
        return function(c) {
          if (c >= 1) {
            return 1;
          }
          var d = 1 / a;
          c += b * d;
          return c - c % d;
        };
      }
      var m = {
        ease: h(.25, .1, .25, 1),
        "ease-in": h(.42, 0, 1, 1),
        "ease-out": h(0, 0, .58, 1),
        "ease-in-out": h(.42, 0, .58, 1),
        "step-start": l(1, i),
        "step-middle": l(1, j),
        "step-end": l(1, k)
      };
      var n = "\\s*(-?\\d+\\.?\\d*|-?\\.\\d+)\\s*";
      var o = new RegExp("cubic-bezier\\(" + n + "," + n + "," + n + "," + n + "\\)");
      var p = /steps\(\s*(\d+)\s*,\s*(start|middle|end)\s*\)/;
      var q = function(a) {
        return a;
      };
      function r(a) {
        var b = o.exec(a);
        if (b) {
          return h.apply(this, b.slice(1).map(Number));
        }
        var c = p.exec(a);
        if (c) {
          return l(Number(c[1]), {
            start: i,
            middle: j,
            end: k
          }[c[2]]);
        }
        var d = m[a];
        if (d) {
          return d;
        }
        return q;
      }
      function s(a) {
        return Math.abs(t(a) / a.playbackRate);
      }
      function t(a) {
        return a.duration * a.iterations;
      }
      var u = 0;
      var v = 1;
      var w = 2;
      var x = 3;
      function y(a, b, c) {
        if (null == b) {
          return u;
        }
        if (b < c.delay) {
          return v;
        }
        if (b >= c.delay + a) {
          return w;
        }
        return x;
      }
      function z(a, b, c, d, e) {
        switch (d) {
         case v:
          if ("backwards" == b || "both" == b) {
            return 0;
          }
          return null;

         case x:
          return c - e;

         case w:
          if ("forwards" == b || "both" == b) {
            return a;
          }
          return null;

         case u:
          return null;
        }
      }
      function A(a, b, c, d) {
        return (d.playbackRate < 0 ? b - a : b) * d.playbackRate + c;
      }
      function B(a, b, c, d, e) {
        if (c === 1 / 0 || c === -(1 / 0) || c - d == b && e.iterations && (e.iterations + e.iterationStart) % 1 == 0) {
          return a;
        }
        return c % a;
      }
      function C(a, b, c, d) {
        if (0 === c) {
          return 0;
        }
        if (b == a) {
          return d.iterationStart + d.iterations - 1;
        }
        return Math.floor(c / a);
      }
      function D(a, b, c, d) {
        var e = a % 2 >= 1;
        var f = "normal" == d.direction || d.direction == (e ? "alternate-reverse" : "alternate");
        var g = f ? c : b - c;
        var h = g / b;
        return b * d.easing(h);
      }
      function E(a, b, c) {
        var d = y(a, b, c);
        var e = z(a, c.fill, b, d, c.delay);
        if (null === e) {
          return null;
        }
        if (0 === a) {
          return d === v ? 0 : 1;
        }
        var f = c.iterationStart * c.duration;
        var g = A(a, e, f, c);
        var h = B(c.duration, t(c), g, f, c);
        var i = C(c.duration, h, g, c);
        return D(i, c.duration, h, c) / c.duration;
      }
      a.cloneTimingInput = e;
      a.makeTiming = f;
      a.normalizeTimingInput = g;
      a.calculateActiveDuration = s;
      a.calculateTimeFraction = E;
      a.calculatePhase = y;
      a.toTimingFunction = r;
      if (false) {
        b.normalizeTimingInput = g;
        b.toTimingFunction = r;
        b.calculateActiveDuration = s;
        b.calculatePhase = y;
        b.PhaseNone = u;
        b.PhaseBefore = v;
        b.PhaseActive = x;
        b.PhaseAfter = w;
        b.calculateActiveTime = z;
        b.calculateScaledActiveTime = A;
        b.calculateIterationTime = B;
        b.calculateCurrentIteration = C;
        b.calculateTransformedTime = D;
      }
    })(c, f);
    (function(a, b) {
      var c = {
        background: [ "backgroundImage", "backgroundPosition", "backgroundSize", "backgroundRepeat", "backgroundAttachment", "backgroundOrigin", "backgroundClip", "backgroundColor" ],
        border: [ "borderTopColor", "borderTopStyle", "borderTopWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth" ],
        borderBottom: [ "borderBottomWidth", "borderBottomStyle", "borderBottomColor" ],
        borderColor: [ "borderTopColor", "borderRightColor", "borderBottomColor", "borderLeftColor" ],
        borderLeft: [ "borderLeftWidth", "borderLeftStyle", "borderLeftColor" ],
        borderRadius: [ "borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius" ],
        borderRight: [ "borderRightWidth", "borderRightStyle", "borderRightColor" ],
        borderTop: [ "borderTopWidth", "borderTopStyle", "borderTopColor" ],
        borderWidth: [ "borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth" ],
        flex: [ "flexGrow", "flexShrink", "flexBasis" ],
        font: [ "fontFamily", "fontSize", "fontStyle", "fontVariant", "fontWeight", "lineHeight" ],
        margin: [ "marginTop", "marginRight", "marginBottom", "marginLeft" ],
        outline: [ "outlineColor", "outlineStyle", "outlineWidth" ],
        padding: [ "paddingTop", "paddingRight", "paddingBottom", "paddingLeft" ]
      };
      var d = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
      var e = {
        thin: "1px",
        medium: "3px",
        thick: "5px"
      };
      var f = {
        borderBottomWidth: e,
        borderLeftWidth: e,
        borderRightWidth: e,
        borderTopWidth: e,
        fontSize: {
          "xx-small": "60%",
          "x-small": "75%",
          small: "89%",
          medium: "100%",
          large: "120%",
          "x-large": "150%",
          "xx-large": "200%"
        },
        fontWeight: {
          normal: "400",
          bold: "700"
        },
        outlineWidth: e,
        textShadow: {
          none: "0px 0px 0px transparent"
        },
        boxShadow: {
          none: "0px 0px 0px 0px transparent"
        }
      };
      function g(a, b) {
        if (a in f) {
          return f[a][b] || b;
        }
        return b;
      }
      function h(a, b, e) {
        var f = c[a];
        if (f) {
          d.style[a] = b;
          for (var h in f) {
            var i = f[h];
            var j = d.style[i];
            e[i] = g(i, j);
          }
        } else {
          e[a] = g(a, b);
        }
      }
      function i(b) {
        if (!Array.isArray(b) && null !== b) {
          throw new TypeError("Keyframes must be null or an array of keyframes");
        }
        if (null == b) {
          return [];
        }
        var c = b.map(function(b) {
          var c = {};
          for (var d in b) {
            var e = b[d];
            if ("offset" == d) {
              if (null != e) {
                e = Number(e);
                if (!isFinite(e)) {
                  throw new TypeError("keyframe offsets must be numbers.");
                }
              }
            } else {
              if ("composite" == d) {
                throw {
                  type: DOMException.NOT_SUPPORTED_ERR,
                  name: "NotSupportedError",
                  message: "add compositing is not supported"
                };
              } else {
                if ("easing" == d) {
                  e = a.toTimingFunction(e);
                } else {
                  e = "" + e;
                }
              }
            }
            h(d, e, c);
          }
          if (void 0 == c.offset) {
            c.offset = null;
          }
          if (void 0 == c.easing) {
            c.easing = a.toTimingFunction("linear");
          }
          return c;
        });
        var d = true;
        var e = true;
        var f = -(1 / 0);
        for (var g = 0; g < c.length; g++) {
          var i = c[g].offset;
          if (null != i) {
            if (i < f) {
              throw {
                code: DOMException.INVALID_MODIFICATION_ERR,
                name: "InvalidModificationError",
                message: "Keyframes are not loosely sorted by offset. Sort or specify offsets."
              };
            }
            f = i;
          } else {
            d = false;
          }
        }
        c = c.filter(function(a) {
          return a.offset >= 0 && a.offset <= 1;
        });
        function j() {
          var a = c.length;
          if (null == c[a - 1].offset) {
            c[a - 1].offset = 1;
          }
          if (a > 1 && null == c[0].offset) {
            c[0].offset = 0;
          }
          var b = 0;
          var d = c[0].offset;
          for (var e = 1; e < a; e++) {
            var f = c[e].offset;
            if (null != f) {
              for (var g = 1; g < e - b; g++) {
                c[b + g].offset = d + (f - d) * g / (e - b);
              }
              b = e;
              d = f;
            }
          }
        }
        if (!d) {
          j();
        }
        return c;
      }
      a.normalizeKeyframes = i;
      if (false) {
        b.normalizeKeyframes = i;
      }
    })(c, f);
    (function(a) {
      var b = {};
      a.isDeprecated = function(a, c, d, e) {
        var f = e ? "are" : "is";
        var g = new Date();
        var h = new Date(c);
        h.setMonth(h.getMonth() + 3);
        if (g < h) {
          if (!(a in b)) {
            console.warn("Web Animations: " + a + " " + f + " deprecated and will stop working on " + h.toDateString() + ". " + d);
          }
          b[a] = true;
          return false;
        } else {
          return true;
        }
      };
      a.deprecated = function(b, c, d, e) {
        var f = e ? "are" : "is";
        if (a.isDeprecated(b, c, d, e)) {
          throw new Error(b + " " + f + " no longer supported. " + d);
        }
      };
    })(c);
    (function(a, b, c) {
      b.convertEffectInput = function(c) {
        var f = a.normalizeKeyframes(c);
        var g = d(f);
        var h = e(g);
        return function(a, c) {
          if (null != c) {
            h.filter(function(a) {
              return c <= 0 && 0 == a.startTime || c >= 1 && 1 == a.endTime || c >= a.startTime && c <= a.endTime;
            }).forEach(function(d) {
              var e = c - d.startTime;
              var f = d.endTime - d.startTime;
              var g = 0 == f ? 0 : d.easing(e / f);
              b.apply(a, d.property, d.interpolation(g));
            });
          } else {
            for (var d in g) {
              if ("offset" != d && "easing" != d && "composite" != d) {
                b.clear(a, d);
              }
            }
          }
        };
      };
      function d(a) {
        var b = {};
        for (var c = 0; c < a.length; c++) {
          for (var d in a[c]) {
            if ("offset" != d && "easing" != d && "composite" != d) {
              var e = {
                offset: a[c].offset,
                easing: a[c].easing,
                value: a[c][d]
              };
              b[d] = b[d] || [];
              b[d].push(e);
            }
          }
        }
        for (var f in b) {
          var g = b[f];
          if (0 != g[0].offset || 1 != g[g.length - 1].offset) {
            throw {
              type: DOMException.NOT_SUPPORTED_ERR,
              name: "NotSupportedError",
              message: "Partial keyframes are not supported"
            };
          }
        }
        return b;
      }
      function e(a) {
        var c = [];
        for (var d in a) {
          var e = a[d];
          for (var f = 0; f < e.length - 1; f++) {
            var g = e[f].offset;
            var h = e[f + 1].offset;
            var i = e[f].value;
            var j = e[f + 1].value;
            if (g == h) {
              if (1 == h) {
                i = j;
              } else {
                j = i;
              }
            }
            c.push({
              startTime: g,
              endTime: h,
              easing: e[f].easing,
              property: d,
              interpolation: b.propertyInterpolation(d, i, j)
            });
          }
        }
        c.sort(function(a, b) {
          return a.startTime - b.startTime;
        });
        return c;
      }
      if (false) {
        c.makePropertySpecificKeyframeGroups = d;
        c.makeInterpolations = e;
      }
    })(c, d, f);
    (function(a, b) {
      var c = {};
      function d(a, b, d) {
        c[d] = c[d] || [];
        c[d].push([ a, b ]);
      }
      function e(a, b, c) {
        for (var e = 0; e < c.length; e++) {
          var f = c[e];
          false && console.assert(f.toLowerCase() === f);
          d(a, b, f);
          if (/-/.test(f)) {
            d(a, b, f.replace(/-(.)/g, function(a, b) {
              return b.toUpperCase();
            }));
          }
        }
      }
      a.addPropertiesHandler = e;
      var f = {
        backgroundColor: "transparent",
        backgroundPosition: "0% 0%",
        borderBottomColor: "currentColor",
        borderBottomLeftRadius: "0px",
        borderBottomRightRadius: "0px",
        borderBottomWidth: "3px",
        borderLeftColor: "currentColor",
        borderLeftWidth: "3px",
        borderRightColor: "currentColor",
        borderRightWidth: "3px",
        borderSpacing: "2px",
        borderTopColor: "currentColor",
        borderTopLeftRadius: "0px",
        borderTopRightRadius: "0px",
        borderTopWidth: "3px",
        bottom: "auto",
        clip: "rect(0px, 0px, 0px, 0px)",
        color: "black",
        fontSize: "100%",
        fontWeight: "400",
        height: "auto",
        left: "auto",
        letterSpacing: "normal",
        lineHeight: "120%",
        marginBottom: "0px",
        marginLeft: "0px",
        marginRight: "0px",
        marginTop: "0px",
        maxHeight: "none",
        maxWidth: "none",
        minHeight: "0px",
        minWidth: "0px",
        opacity: "1.0",
        outlineColor: "invert",
        outlineOffset: "0px",
        outlineWidth: "3px",
        paddingBottom: "0px",
        paddingLeft: "0px",
        paddingRight: "0px",
        paddingTop: "0px",
        right: "auto",
        textIndent: "0px",
        textShadow: "0px 0px 0px transparent",
        top: "auto",
        transform: "",
        verticalAlign: "0px",
        visibility: "visible",
        width: "auto",
        wordSpacing: "normal",
        zIndex: "auto"
      };
      function g(b, d, e) {
        if ("initial" == d || "initial" == e) {
          var g = b.replace(/-(.)/g, function(a, b) {
            return b.toUpperCase();
          });
          if ("initial" == d) {
            d = f[g];
          }
          if ("initial" == e) {
            e = f[g];
          }
        }
        var h = d == e ? [] : c[b];
        for (var i = 0; h && i < h.length; i++) {
          var j = h[i][0](d);
          var k = h[i][0](e);
          if (void 0 !== j && void 0 !== k) {
            var l = h[i][1](j, k);
            if (l) {
              var m = a.Interpolation.apply(null, l);
              return function(a) {
                if (0 == a) {
                  return d;
                }
                if (1 == a) {
                  return e;
                }
                return m(a);
              };
            }
          }
        }
        return a.Interpolation(false, true, function(a) {
          return a ? e : d;
        });
      }
      a.propertyInterpolation = g;
    })(d, f);
    (function(a, b, c) {
      function d(b) {
        var c = 0;
        var d = a.calculateActiveDuration(b);
        var e = function(c) {
          return a.calculateTimeFraction(d, c, b);
        };
        e._totalDuration = b.delay + d + b.endDelay;
        e._isCurrent = function(c) {
          var e = a.calculatePhase(d, c, b);
          return e === PhaseActive || e === PhaseBefore;
        };
        return e;
      }
      b.KeyframeEffect = function(c, e, f) {
        var g = d(a.normalizeTimingInput(f));
        var h = b.convertEffectInput(e);
        var i;
        var j = function() {
          false && console.assert("undefined" !== typeof i);
          h(c, i);
        };
        j._update = function(a) {
          i = g(a);
          return null !== i;
        };
        j._clear = function() {
          h(c, null);
        };
        j._hasSameTarget = function(a) {
          return c === a;
        };
        j._isCurrent = g._isCurrent;
        j._totalDuration = g._totalDuration;
        return j;
      };
      b.NullEffect = function(a) {
        var b = function() {
          if (a) {
            a();
            a = null;
          }
        };
        b._update = function() {
          return null;
        };
        b._totalDuration = 0;
        b._isCurrent = function() {
          return false;
        };
        b._hasSameTarget = function() {
          return false;
        };
        return b;
      };
      if (false) {
        c.webAnimations1KeyframeEffect = b.KeyframeEffect;
        c.effectTime = d;
      }
    })(c, d, f);
    (function(a, b) {
      var c = {
        cssText: 1,
        length: 1,
        parentRule: 1
      };
      var d = {
        getPropertyCSSValue: 1,
        getPropertyPriority: 1,
        getPropertyValue: 1,
        item: 1,
        removeProperty: 1,
        setProperty: 1
      };
      var e = {
        removeProperty: 1,
        setProperty: 1
      };
      function f(a, b, c) {
        c.enumerable = true;
        c.configurable = true;
        Object.defineProperty(a, b, c);
      }
      function g(a) {
        false && console.assert(!(a.style instanceof g), "Element must not already have an animated style attached.");
        this._surrogateStyle = document.createElementNS("http://www.w3.org/1999/xhtml", "div").style;
        this._style = a.style;
        this._length = 0;
        this._isAnimatedProperty = {};
        for (var b = 0; b < this._style.length; b++) {
          var c = this._style[b];
          this._surrogateStyle[c] = this._style[c];
        }
        this._updateIndices();
      }
      g.prototype = {
        get cssText() {
          return this._surrogateStyle.cssText;
        },
        set cssText(a) {
          var b = {};
          for (var c = 0; c < this._surrogateStyle.length; c++) {
            b[this._surrogateStyle[c]] = true;
          }
          this._surrogateStyle.cssText = a;
          this._updateIndices();
          for (var c = 0; c < this._surrogateStyle.length; c++) {
            b[this._surrogateStyle[c]] = true;
          }
          for (var d in b) {
            if (!this._isAnimatedProperty[d]) {
              this._style.setProperty(d, this._surrogateStyle.getPropertyValue(d));
            }
          }
        },
        get length() {
          return this._surrogateStyle.length;
        },
        get parentRule() {
          return this._style.parentRule;
        },
        _updateIndices: function() {
          while (this._length < this._surrogateStyle.length) {
            Object.defineProperty(this, this._length, {
              configurable: true,
              enumerable: false,
              get: function(a) {
                return function() {
                  return this._surrogateStyle[a];
                };
              }(this._length)
            });
            this._length++;
          }
          while (this._length > this._surrogateStyle.length) {
            this._length--;
            Object.defineProperty(this, this._length, {
              configurable: true,
              enumerable: false,
              value: void 0
            });
          }
        },
        _set: function(a, b) {
          this._style[a] = b;
          this._isAnimatedProperty[a] = true;
        },
        _clear: function(a) {
          this._style[a] = this._surrogateStyle[a];
          delete this._isAnimatedProperty[a];
        }
      };
      for (var h in d) {
        g.prototype[h] = function(a, b) {
          return function() {
            var c = this._surrogateStyle[a].apply(this._surrogateStyle, arguments);
            if (b) {
              if (!this._isAnimatedProperty[arguments[0]]) {
                this._style[a].apply(this._style, arguments);
              }
              this._updateIndices();
            }
            return c;
          };
        }(h, h in e);
      }
      for (var i in document.documentElement.style) {
        if (i in c || i in d) {
          continue;
        }
        (function(a) {
          f(g.prototype, a, {
            get: function() {
              return this._surrogateStyle[a];
            },
            set: function(b) {
              this._surrogateStyle[a] = b;
              this._updateIndices();
              if (!this._isAnimatedProperty[a]) {
                this._style[a] = b;
              }
            }
          });
        })(i);
      }
      function j(a) {
        if (a._webAnimationsPatchedStyle) {
          return;
        }
        var b = new g(a);
        try {
          f(a, "style", {
            get: function() {
              return b;
            }
          });
        } catch (c) {
          a.style._set = function(b, c) {
            a.style[b] = c;
          };
          a.style._clear = function(b) {
            a.style[b] = "";
          };
        }
        a._webAnimationsPatchedStyle = a.style;
      }
      a.apply = function(b, c, d) {
        j(b);
        b.style._set(a.propertyName(c), d);
      };
      a.clear = function(b, c) {
        if (b._webAnimationsPatchedStyle) {
          b.style._clear(a.propertyName(c));
        }
      };
      if (false) {
        b.ensureStyleIsPatched = j;
      }
    })(d, f);
    (function(a) {
      window.Element.prototype.animate = function(b, c) {
        return a.timeline._play(a.KeyframeEffect(this, b, c));
      };
    })(d);
    (function(a, b) {
      function c(a, b, d) {
        if ("number" == typeof a && "number" == typeof b) {
          return a * (1 - d) + b * d;
        }
        if ("boolean" == typeof a && "boolean" == typeof b) {
          return d < .5 ? a : b;
        }
        false && console.assert(Array.isArray(a) && Array.isArray(b), "If interpolation arguments are not numbers or bools they must be arrays");
        if (a.length == b.length) {
          var e = [];
          for (var f = 0; f < a.length; f++) {
            e.push(c(a[f], b[f], d));
          }
          return e;
        }
        throw "Mismatched interpolation arguments " + a + ":" + b;
      }
      a.Interpolation = function(a, b, d) {
        return function(e) {
          return d(c(a, b, e));
        };
      };
      if (false) {
        b.interpolate = c;
      }
    })(d, f);
    (function(a, b) {
      var c = function() {
        function a(a, b) {
          var c = [ [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ] ];
          for (var d = 0; d < 4; d++) {
            for (var e = 0; e < 4; e++) {
              for (var f = 0; f < 4; f++) {
                c[d][e] += b[d][f] * a[f][e];
              }
            }
          }
          return c;
        }
        function b(a) {
          return 0 == a[0][2] && 0 == a[0][3] && 0 == a[1][2] && 0 == a[1][3] && 0 == a[2][0] && 0 == a[2][1] && 1 == a[2][2] && 0 == a[2][3] && 0 == a[3][2] && 1 == a[3][3];
        }
        function c(c, d, e, f, g) {
          var h = [ [ 1, 0, 0, 0 ], [ 0, 1, 0, 0 ], [ 0, 0, 1, 0 ], [ 0, 0, 0, 1 ] ];
          for (var i = 0; i < 4; i++) {
            h[i][3] = g[i];
          }
          for (var i = 0; i < 3; i++) {
            for (var j = 0; j < 3; j++) {
              h[3][i] += c[j] * h[j][i];
            }
          }
          var k = f[0], l = f[1], m = f[2], n = f[3];
          var o = [ [ 1, 0, 0, 0 ], [ 0, 1, 0, 0 ], [ 0, 0, 1, 0 ], [ 0, 0, 0, 1 ] ];
          o[0][0] = 1 - 2 * (l * l + m * m);
          o[0][1] = 2 * (k * l - m * n);
          o[0][2] = 2 * (k * m + l * n);
          o[1][0] = 2 * (k * l + m * n);
          o[1][1] = 1 - 2 * (k * k + m * m);
          o[1][2] = 2 * (l * m - k * n);
          o[2][0] = 2 * (k * m - l * n);
          o[2][1] = 2 * (l * m + k * n);
          o[2][2] = 1 - 2 * (k * k + l * l);
          h = a(h, o);
          var p = [ [ 1, 0, 0, 0 ], [ 0, 1, 0, 0 ], [ 0, 0, 1, 0 ], [ 0, 0, 0, 1 ] ];
          if (e[2]) {
            p[2][1] = e[2];
            h = a(h, p);
          }
          if (e[1]) {
            p[2][1] = 0;
            p[2][0] = e[0];
            h = a(h, p);
          }
          if (e[0]) {
            p[2][0] = 0;
            p[1][0] = e[0];
            h = a(h, p);
          }
          for (var i = 0; i < 3; i++) {
            for (var j = 0; j < 3; j++) {
              h[i][j] *= d[i];
            }
          }
          if (b(h)) {
            return [ h[0][0], h[0][1], h[1][0], h[1][1], h[3][0], h[3][1] ];
          }
          return h[0].concat(h[1], h[2], h[3]);
        }
        return c;
      }();
      function d(a, b, c) {
        return Math.max(Math.min(a, c), b);
      }
      function e(b, c, e) {
        var f = a.dot(b, c);
        f = d(f, -1, 1);
        var g = [];
        if (1 === f) {
          g = b;
        } else {
          var h = Math.acos(f);
          var i = 1 * Math.sin(e * h) / Math.sqrt(1 - f * f);
          for (var j = 0; j < 4; j++) {
            g.push(b[j] * (Math.cos(e * h) - f * i) + c[j] * i);
          }
        }
        return g;
      }
      a.composeMatrix = c;
      a.quat = e;
    })(d, f);
    (function(a, b, c) {
      a.sequenceNumber = 0;
      var d = function(a, b, c) {
        this.target = a;
        this.currentTime = b;
        this.timelineTime = c;
        this.type = "finish";
        this.bubbles = false;
        this.cancelable = false;
        this.currentTarget = a;
        this.defaultPrevented = false;
        this.eventPhase = Event.AT_TARGET;
        this.timeStamp = Date.now();
      };
      b.Animation = function(b) {
        this._sequenceNumber = a.sequenceNumber++;
        this._currentTime = 0;
        this._startTime = null;
        this._paused = false;
        this._playbackRate = 1;
        this._inTimeline = true;
        this._finishedFlag = false;
        this.onfinish = null;
        this._finishHandlers = [];
        this._effect = b;
        this._inEffect = this._effect._update(0);
        this._idle = true;
        this._currentTimePending = false;
      };
      b.Animation.prototype = {
        _ensureAlive: function() {
          if (this.playbackRate < 0 && 0 === this.currentTime) {
            this._inEffect = this._effect._update(-1);
          } else {
            this._inEffect = this._effect._update(this.currentTime);
          }
          if (!this._inTimeline && (this._inEffect || !this._finishedFlag)) {
            this._inTimeline = true;
            b.timeline._animations.push(this);
          }
        },
        _tickCurrentTime: function(a, b) {
          if (a != this._currentTime) {
            this._currentTime = a;
            if (this._isFinished && !b) {
              this._currentTime = this._playbackRate > 0 ? this._totalDuration : 0;
            }
            this._ensureAlive();
          }
        },
        get currentTime() {
          if (this._idle || this._currentTimePending) {
            return null;
          }
          return this._currentTime;
        },
        set currentTime(a) {
          a = +a;
          if (isNaN(a)) {
            return;
          }
          b.restart();
          if (!this._paused && null != this._startTime) {
            this._startTime = this._timeline.currentTime - a / this._playbackRate;
          }
          this._currentTimePending = false;
          if (this._currentTime == a) {
            return;
          }
          this._tickCurrentTime(a, true);
          b.invalidateEffects();
        },
        get startTime() {
          return this._startTime;
        },
        set startTime(a) {
          a = +a;
          if (isNaN(a)) {
            return;
          }
          if (this._paused || this._idle) {
            return;
          }
          this._startTime = a;
          this._tickCurrentTime((this._timeline.currentTime - this._startTime) * this.playbackRate);
          b.invalidateEffects();
        },
        get playbackRate() {
          return this._playbackRate;
        },
        set playbackRate(a) {
          if (a == this._playbackRate) {
            return;
          }
          var b = this.currentTime;
          this._playbackRate = a;
          this._startTime = null;
          if ("paused" != this.playState && "idle" != this.playState) {
            this.play();
          }
          if (null != b) {
            this.currentTime = b;
          }
        },
        get _isFinished() {
          return !this._idle && (this._playbackRate > 0 && this._currentTime >= this._totalDuration || this._playbackRate < 0 && this._currentTime <= 0);
        },
        get _totalDuration() {
          return this._effect._totalDuration;
        },
        get playState() {
          if (this._idle) {
            return "idle";
          }
          if (null == this._startTime && !this._paused && 0 != this.playbackRate || this._currentTimePending) {
            return "pending";
          }
          if (this._paused) {
            return "paused";
          }
          if (this._isFinished) {
            return "finished";
          }
          return "running";
        },
        play: function() {
          this._paused = false;
          if (this._isFinished || this._idle) {
            this._currentTime = this._playbackRate > 0 ? 0 : this._totalDuration;
            this._startTime = null;
            b.invalidateEffects();
          }
          this._finishedFlag = false;
          b.restart();
          this._idle = false;
          this._ensureAlive();
        },
        pause: function() {
          if (!this._isFinished && !this._paused && !this._idle) {
            this._currentTimePending = true;
          }
          this._startTime = null;
          this._paused = true;
        },
        finish: function() {
          if (this._idle) {
            return;
          }
          this.currentTime = this._playbackRate > 0 ? this._totalDuration : 0;
          this._startTime = this._totalDuration - this.currentTime;
          this._currentTimePending = false;
        },
        cancel: function() {
          if (!this._inEffect) {
            return;
          }
          this._inEffect = false;
          this._idle = true;
          this.currentTime = 0;
          this._startTime = null;
          this._effect._update(null);
          b.invalidateEffects();
          b.restart();
        },
        reverse: function() {
          this.playbackRate *= -1;
          this.play();
        },
        addEventListener: function(a, b) {
          if ("function" == typeof b && "finish" == a) {
            this._finishHandlers.push(b);
          }
        },
        removeEventListener: function(a, b) {
          if ("finish" != a) {
            return;
          }
          var c = this._finishHandlers.indexOf(b);
          if (c >= 0) {
            this._finishHandlers.splice(c, 1);
          }
        },
        _fireEvents: function(a) {
          var b = this._isFinished;
          if ((b || this._idle) && !this._finishedFlag) {
            var c = new d(this, this._currentTime, a);
            var e = this._finishHandlers.concat(this.onfinish ? [ this.onfinish ] : []);
            setTimeout(function() {
              e.forEach(function(a) {
                a.call(c.target, c);
              });
            }, 0);
          }
          this._finishedFlag = b;
        },
        _tick: function(a) {
          if (!this._idle && !this._paused) {
            if (null == this._startTime) {
              this.startTime = a - this._currentTime / this.playbackRate;
            } else {
              if (!this._isFinished) {
                this._tickCurrentTime((a - this._startTime) * this.playbackRate);
              }
            }
          }
          this._currentTimePending = false;
          this._fireEvents(a);
          return !this._idle && (this._inEffect || !this._finishedFlag);
        }
      };
      if (false) {
        c.webAnimations1Animation = b.Animation;
      }
    })(c, d, f);
    (function(a, b, c) {
      var d = window.requestAnimationFrame;
      var e = [];
      var f = 0;
      window.requestAnimationFrame = function(a) {
        var b = f++;
        if (0 == e.length && !false) {
          d(g);
        }
        e.push([ b, a ]);
        return b;
      };
      window.cancelAnimationFrame = function(a) {
        e.forEach(function(b) {
          if (b[0] == a) {
            b[1] = function() {};
          }
        });
      };
      function g(a) {
        var b = e;
        e = [];
        if (a < t.currentTime) {
          a = t.currentTime;
        }
        s(a);
        b.forEach(function(b) {
          b[1](a);
        });
        if (n) {
          s(a);
        }
        p();
        j = void 0;
      }
      function h(a, b) {
        return a._sequenceNumber - b._sequenceNumber;
      }
      function i() {
        this._animations = [];
        this.currentTime = window.performance && performance.now ? performance.now() : 0;
      }
      i.prototype = {
        _play: function(c) {
          c._timing = a.normalizeTimingInput(c.timing);
          var d = new b.Animation(c);
          d._idle = false;
          d._timeline = this;
          this._animations.push(d);
          b.restart();
          b.invalidateEffects();
          return d;
        }
      };
      var j = void 0;
      if (false) {
        var k = function() {
          return t.currentTime;
        };
      } else {
        var k = function() {
          if (void 0 == j) {
            j = performance.now();
          }
          return j;
        };
      }
      var l = false;
      var m = false;
      b.restart = function() {
        if (!l) {
          l = true;
          requestAnimationFrame(function() {});
          m = true;
        }
        return m;
      };
      var n = false;
      b.invalidateEffects = function() {
        n = true;
      };
      var o = [];
      function p() {
        o.forEach(function(a) {
          a();
        });
        o.length = 0;
      }
      var q = 1e3 / 60;
      var r = window.getComputedStyle;
      Object.defineProperty(window, "getComputedStyle", {
        configurable: true,
        enumerable: true,
        value: function() {
          if (n) {
            var a = k();
            if (a - t.currentTime > 0) {
              t.currentTime += q * (Math.floor((a - t.currentTime) / q) + 1);
            }
            s(t.currentTime);
          }
          p();
          return r.apply(this, arguments);
        }
      });
      function s(a) {
        m = false;
        var c = b.timeline;
        c.currentTime = a;
        c._animations.sort(h);
        l = false;
        var d = c._animations;
        c._animations = [];
        var e = [];
        var f = [];
        d = d.filter(function(b) {
          b._inTimeline = b._tick(a);
          if (!b._inEffect) {
            e.push(b._effect);
          } else {
            f.push(b._effect);
          }
          if (!b._isFinished && !b._paused && !b._idle) {
            l = true;
          }
          return b._inTimeline;
        });
        o.push.apply(o, e);
        o.push.apply(o, f);
        c._animations.push.apply(c._animations, d);
        n = false;
        if (l) {
          requestAnimationFrame(function() {});
        }
      }
      if (false) {
        c.tick = function(a) {
          t.currentTime = a;
          g(a);
        };
        c.isTicking = function() {
          return l;
        };
        c.setTicking = function(a) {
          l = a;
        };
      }
      var t = new i();
      b.timeline = t;
    })(c, d, f);
    (function(a, b) {
      var c = function() {
        function a(a) {
          return a[0][0] * a[1][1] * a[2][2] + a[1][0] * a[2][1] * a[0][2] + a[2][0] * a[0][1] * a[1][2] - a[0][2] * a[1][1] * a[2][0] - a[1][2] * a[2][1] * a[0][0] - a[2][2] * a[0][1] * a[1][0];
        }
        function b(b) {
          var c = 1 / a(b);
          var d = b[0][0], e = b[0][1], f = b[0][2];
          var g = b[1][0], h = b[1][1], i = b[1][2];
          var j = b[2][0], k = b[2][1], l = b[2][2];
          var m = [ [ (h * l - i * k) * c, (f * k - e * l) * c, (e * i - f * h) * c, 0 ], [ (i * j - g * l) * c, (d * l - f * j) * c, (f * g - d * i) * c, 0 ], [ (g * k - h * j) * c, (j * e - d * k) * c, (d * h - e * g) * c, 0 ] ];
          var n = [];
          for (var o = 0; o < 3; o++) {
            var p = 0;
            for (var q = 0; q < 3; q++) {
              p += b[3][q] * m[q][o];
            }
            n.push(p);
          }
          n.push(1);
          m.push(n);
          return m;
        }
        function c(a) {
          return [ [ a[0][0], a[1][0], a[2][0], a[3][0] ], [ a[0][1], a[1][1], a[2][1], a[3][1] ], [ a[0][2], a[1][2], a[2][2], a[3][2] ], [ a[0][3], a[1][3], a[2][3], a[3][3] ] ];
        }
        function e(a, b) {
          var c = [];
          for (var d = 0; d < 4; d++) {
            var e = 0;
            for (var f = 0; f < 4; f++) {
              e += a[f] * b[f][d];
            }
            c.push(e);
          }
          return c;
        }
        function f(a) {
          var b = g(a);
          return [ a[0] / b, a[1] / b, a[2] / b ];
        }
        function g(a) {
          return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
        }
        function h(a, b, c, d) {
          return [ c * a[0] + d * b[0], c * a[1] + d * b[1], c * a[2] + d * b[2] ];
        }
        function i(a, b) {
          return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
        }
        function j(j) {
          var k = [ j.slice(0, 4), j.slice(4, 8), j.slice(8, 12), j.slice(12, 16) ];
          if (1 !== k[3][3]) {
            return null;
          }
          var l = [];
          for (var m = 0; m < 4; m++) {
            l.push(k[m].slice());
          }
          for (var m = 0; m < 3; m++) {
            l[m][3] = 0;
          }
          if (0 === a(l)) {
            return false;
          }
          var n = [];
          var o;
          if (k[0][3] || k[1][3] || k[2][3]) {
            n.push(k[0][3]);
            n.push(k[1][3]);
            n.push(k[2][3]);
            n.push(k[3][3]);
            var p = b(l);
            var q = c(p);
            o = e(n, q);
          } else {
            o = [ 0, 0, 0, 1 ];
          }
          var r = k[3].slice(0, 3);
          var s = [];
          s.push(k[0].slice(0, 3));
          var t = [];
          t.push(g(s[0]));
          s[0] = f(s[0]);
          var u = [];
          s.push(k[1].slice(0, 3));
          u.push(d(s[0], s[1]));
          s[1] = h(s[1], s[0], 1, -u[0]);
          t.push(g(s[1]));
          s[1] = f(s[1]);
          u[0] /= t[1];
          s.push(k[2].slice(0, 3));
          u.push(d(s[0], s[2]));
          s[2] = h(s[2], s[0], 1, -u[1]);
          u.push(d(s[1], s[2]));
          s[2] = h(s[2], s[1], 1, -u[2]);
          t.push(g(s[2]));
          s[2] = f(s[2]);
          u[1] /= t[2];
          u[2] /= t[2];
          var v = i(s[1], s[2]);
          if (d(s[0], v) < 0) {
            for (var m = 0; m < 3; m++) {
              t[m] *= -1;
              s[m][0] *= -1;
              s[m][1] *= -1;
              s[m][2] *= -1;
            }
          }
          var w = s[0][0] + s[1][1] + s[2][2] + 1;
          var x;
          var y;
          if (w > 1e-4) {
            x = .5 / Math.sqrt(w);
            y = [ (s[2][1] - s[1][2]) * x, (s[0][2] - s[2][0]) * x, (s[1][0] - s[0][1]) * x, .25 / x ];
          } else {
            if (s[0][0] > s[1][1] && s[0][0] > s[2][2]) {
              x = 2 * Math.sqrt(1 + s[0][0] - s[1][1] - s[2][2]);
              y = [ .25 * x, (s[0][1] + s[1][0]) / x, (s[0][2] + s[2][0]) / x, (s[2][1] - s[1][2]) / x ];
            } else {
              if (s[1][1] > s[2][2]) {
                x = 2 * Math.sqrt(1 + s[1][1] - s[0][0] - s[2][2]);
                y = [ (s[0][1] + s[1][0]) / x, .25 * x, (s[1][2] + s[2][1]) / x, (s[0][2] - s[2][0]) / x ];
              } else {
                x = 2 * Math.sqrt(1 + s[2][2] - s[0][0] - s[1][1]);
                y = [ (s[0][2] + s[2][0]) / x, (s[1][2] + s[2][1]) / x, .25 * x, (s[1][0] - s[0][1]) / x ];
              }
            }
          }
          return [ r, t, u, y, o ];
        }
        return j;
      }();
      function d(a, b) {
        var c = 0;
        for (var d = 0; d < a.length; d++) {
          c += a[d] * b[d];
        }
        return c;
      }
      function e(a, b) {
        return [ a[0] * b[0] + a[4] * b[1] + a[8] * b[2] + a[12] * b[3], a[1] * b[0] + a[5] * b[1] + a[9] * b[2] + a[13] * b[3], a[2] * b[0] + a[6] * b[1] + a[10] * b[2] + a[14] * b[3], a[3] * b[0] + a[7] * b[1] + a[11] * b[2] + a[15] * b[3], a[0] * b[4] + a[4] * b[5] + a[8] * b[6] + a[12] * b[7], a[1] * b[4] + a[5] * b[5] + a[9] * b[6] + a[13] * b[7], a[2] * b[4] + a[6] * b[5] + a[10] * b[6] + a[14] * b[7], a[3] * b[4] + a[7] * b[5] + a[11] * b[6] + a[15] * b[7], a[0] * b[8] + a[4] * b[9] + a[8] * b[10] + a[12] * b[11], a[1] * b[8] + a[5] * b[9] + a[9] * b[10] + a[13] * b[11], a[2] * b[8] + a[6] * b[9] + a[10] * b[10] + a[14] * b[11], a[3] * b[8] + a[7] * b[9] + a[11] * b[10] + a[15] * b[11], a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12] * b[15], a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13] * b[15], a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14] * b[15], a[3] * b[12] + a[7] * b[13] + a[11] * b[14] + a[15] * b[15] ];
      }
      function f(a) {
        switch (a.t) {
         case "rotatex":
          var b = a.d[0].rad || 0;
          var c = a.d[0].deg || 0;
          var d = c * Math.PI / 180 + b;
          return [ 1, 0, 0, 0, 0, Math.cos(d), Math.sin(d), 0, 0, -Math.sin(d), Math.cos(d), 0, 0, 0, 0, 1 ];

         case "rotatey":
          var b = a.d[0].rad || 0;
          var c = a.d[0].deg || 0;
          var d = c * Math.PI / 180 + b;
          return [ Math.cos(d), 0, -Math.sin(d), 0, 0, 1, 0, 0, Math.sin(d), 0, Math.cos(d), 0, 0, 0, 0, 1 ];

         case "rotate":
         case "rotatez":
          var b = a.d[0].rad || 0;
          var c = a.d[0].deg || 0;
          var d = c * Math.PI / 180 + b;
          return [ Math.cos(d), Math.sin(d), 0, 0, -Math.sin(d), Math.cos(d), 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ];

         case "rotate3d":
          var e = a.d[0];
          var f = a.d[1];
          var g = a.d[2];
          var b = a.d[3].rad || 0;
          var c = a.d[3].deg || 0;
          var d = c * Math.PI / 180 + b;
          var h = e * e + f * f + g * g;
          if (0 === h) {
            e = 1;
            f = 0;
            g = 0;
          } else {
            if (1 !== h) {
              var i = Math.sqrt(h);
              e /= i;
              f /= i;
              g /= i;
            }
          }
          var j = Math.sin(d / 2);
          var k = j * Math.cos(d / 2);
          var l = j * j;
          return [ 1 - 2 * (f * f + g * g) * l, 2 * (e * f * l + g * k), 2 * (e * g * l - f * k), 0, 2 * (e * f * l - g * k), 1 - 2 * (e * e + g * g) * l, 2 * (f * g * l + e * k), 0, 2 * (e * g * l + f * k), 2 * (f * g * l - e * k), 1 - 2 * (e * e + f * f) * l, 0, 0, 0, 0, 1 ];

         case "scale":
          return [ a.d[0], 0, 0, 0, 0, a.d[1], 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ];

         case "scalex":
          return [ a.d[0], 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ];

         case "scaley":
          return [ 1, 0, 0, 0, 0, a.d[0], 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ];

         case "scalez":
          return [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, a.d[0], 0, 0, 0, 0, 1 ];

         case "scale3d":
          return [ a.d[0], 0, 0, 0, 0, a.d[1], 0, 0, 0, 0, a.d[2], 0, 0, 0, 0, 1 ];

         case "skew":
          var m = a.d[0].deg || 0;
          var n = a.d[0].rad || 0;
          var o = a.d[1].deg || 0;
          var p = a.d[1].rad || 0;
          var q = m * Math.PI / 180 + n;
          var r = o * Math.PI / 180 + p;
          return [ 1, Math.tan(r), 0, 0, Math.tan(q), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ];

         case "skewx":
          var b = a.d[0].rad || 0;
          var c = a.d[0].deg || 0;
          var d = c * Math.PI / 180 + b;
          return [ 1, 0, 0, 0, Math.tan(d), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ];

         case "skewy":
          var b = a.d[0].rad || 0;
          var c = a.d[0].deg || 0;
          var d = c * Math.PI / 180 + b;
          return [ 1, Math.tan(d), 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ];

         case "translate":
          var e = a.d[0].px || 0;
          var f = a.d[1].px || 0;
          return [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, e, f, 0, 1 ];

         case "translatex":
          var e = a.d[0].px || 0;
          return [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, e, 0, 0, 1 ];

         case "translatey":
          var f = a.d[0].px || 0;
          return [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, f, 0, 1 ];

         case "translatez":
          var g = a.d[0].px || 0;
          return [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, g, 1 ];

         case "translate3d":
          var e = a.d[0].px || 0;
          var f = a.d[1].px || 0;
          var g = a.d[2].px || 0;
          return [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, e, f, g, 1 ];

         case "perspective":
          var s = a.d[0].px ? -1 / a.d[0].px : 0;
          return [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, s, 0, 0, 0, 1 ];

         case "matrix":
          return [ a.d[0], a.d[1], 0, 0, a.d[2], a.d[3], 0, 0, 0, 0, 1, 0, a.d[4], a.d[5], 0, 1 ];

         case "matrix3d":
          return a.d;

         default:
          false && console.assert(false, "Transform item type " + a.t + " conversion to matrix not yet implemented.");
        }
      }
      function g(a) {
        if (0 === a.length) {
          return [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ];
        }
        return a.map(f).reduce(e);
      }
      function h(a) {
        return [ c(g(a)) ];
      }
      a.dot = d;
      a.makeMatrixDecomposition = h;
    })(d, f);
    (function(a) {
      function b(a, b) {
        var c = a.exec(b);
        if (c) {
          c = a.ignoreCase ? c[0].toLowerCase() : c[0];
          return [ c, b.substr(c.length) ];
        }
      }
      function c(a, b) {
        b = b.replace(/^\s*/, "");
        var c = a(b);
        if (c) {
          return [ c[0], c[1].replace(/^\s*/, "") ];
        }
      }
      function d(a, d, e) {
        a = c.bind(null, a);
        var f = [];
        while (true) {
          var g = a(e);
          if (!g) {
            return [ f, e ];
          }
          f.push(g[0]);
          e = g[1];
          g = b(d, e);
          if (!g || "" == g[1]) {
            return [ f, e ];
          }
          e = g[1];
        }
      }
      function e(a, b) {
        var c = 0;
        for (var d = 0; d < b.length; d++) {
          if (/\s|,/.test(b[d]) && 0 == c) {
            break;
          } else {
            if ("(" == b[d]) {
              c++;
            } else {
              if (")" == b[d]) {
                c--;
                if (0 == c) {
                  d++;
                }
                if (c <= 0) {
                  break;
                }
              }
            }
          }
        }
        var e = a(b.substr(0, d));
        return void 0 == e ? void 0 : [ e, b.substr(d) ];
      }
      function f(a, b) {
        var c = a;
        var d = b;
        while (c && d) {
          c > d ? c %= d : d %= c;
        }
        c = a * b / (c + d);
        return c;
      }
      function g(a) {
        return function(b) {
          var c = a(b);
          if (c) {
            c[0] = void 0;
          }
          return c;
        };
      }
      function h(a, b) {
        return function(c) {
          var d = a(c);
          if (d) {
            return d;
          }
          return [ b, c ];
        };
      }
      function i(b, c) {
        var d = [];
        for (var e = 0; e < b.length; e++) {
          var f = a.consumeTrimmed(b[e], c);
          if (!f || "" == f[0]) {
            return;
          }
          if (void 0 !== f[0]) {
            d.push(f[0]);
          }
          c = f[1];
        }
        if ("" == c) {
          return d;
        }
      }
      function j(a, b, c, d, e) {
        var g = [];
        var h = [];
        var i = [];
        var j = f(d.length, e.length);
        for (var k = 0; k < j; k++) {
          var l = b(d[k % d.length], e[k % e.length]);
          if (!l) {
            return;
          }
          g.push(l[0]);
          h.push(l[1]);
          i.push(l[2]);
        }
        return [ g, h, function(b) {
          var d = b.map(function(a, b) {
            return i[b](a);
          }).join(c);
          return a ? a(d) : d;
        } ];
      }
      function k(a, b, c) {
        var d = [];
        var e = [];
        var f = [];
        var g = 0;
        for (var h = 0; h < c.length; h++) {
          if ("function" == typeof c[h]) {
            var i = c[h](a[g], b[g++]);
            d.push(i[0]);
            e.push(i[1]);
            f.push(i[2]);
          } else {
            (function(a) {
              d.push(false);
              e.push(false);
              f.push(function() {
                return c[a];
              });
            })(h);
          }
        }
        return [ d, e, function(a) {
          var b = "";
          for (var c = 0; c < a.length; c++) {
            b += f[c](a[c]);
          }
          return b;
        } ];
      }
      a.consumeToken = b;
      a.consumeTrimmed = c;
      a.consumeRepeated = d;
      a.consumeParenthesised = e;
      a.ignore = g;
      a.optional = h;
      a.consumeList = i;
      a.mergeNestedRepeated = j.bind(null, null);
      a.mergeWrappedNestedRepeated = j;
      a.mergeList = k;
    })(d);
    (function(a) {
      function b(b) {
        var c = {
          inset: false,
          lengths: [],
          color: null
        };
        function d(b) {
          var d = a.consumeToken(/^inset/i, b);
          if (d) {
            c.inset = true;
            return d;
          }
          var d = a.consumeLengthOrPercent(b);
          if (d) {
            c.lengths.push(d[0]);
            return d;
          }
          var d = a.consumeColor(b);
          if (d) {
            c.color = d[0];
            return d;
          }
        }
        var e = a.consumeRepeated(d, /^/, b);
        if (e && e[0].length) {
          return [ c, e[1] ];
        }
      }
      function c(c) {
        var d = a.consumeRepeated(b, /^,/, c);
        if (d && "" == d[1]) {
          return d[0];
        }
      }
      function d(b, c) {
        while (b.lengths.length < Math.max(b.lengths.length, c.lengths.length)) {
          b.lengths.push({
            px: 0
          });
        }
        while (c.lengths.length < Math.max(b.lengths.length, c.lengths.length)) {
          c.lengths.push({
            px: 0
          });
        }
        if (b.inset != c.inset || !!b.color != !!c.color) {
          return;
        }
        var d = [];
        var e;
        var f = [ [], 0 ];
        var g = [ [], 0 ];
        for (var h = 0; h < b.lengths.length; h++) {
          var i = a.mergeDimensions(b.lengths[h], c.lengths[h], 2 == h);
          f[0].push(i[0]);
          g[0].push(i[1]);
          d.push(i[2]);
        }
        if (b.color && c.color) {
          var j = a.mergeColors(b.color, c.color);
          f[1] = j[0];
          g[1] = j[1];
          e = j[2];
        }
        return [ f, g, function(a) {
          var c = b.inset ? "inset " : " ";
          for (var f = 0; f < d.length; f++) {
            c += d[f](a[0][f]) + " ";
          }
          if (e) {
            c += e(a[1]);
          }
          return c;
        } ];
      }
      function e(b, c, d, e) {
        var f = [];
        var g = [];
        function h(a) {
          return {
            inset: a,
            color: [ 0, 0, 0, 0 ],
            lengths: [ {
              px: 0
            }, {
              px: 0
            }, {
              px: 0
            }, {
              px: 0
            } ]
          };
        }
        for (var i = 0; i < d.length || i < e.length; i++) {
          var j = d[i] || h(e[i].inset);
          var k = e[i] || h(d[i].inset);
          f.push(j);
          g.push(k);
        }
        return a.mergeNestedRepeated(b, c, f, g);
      }
      var f = e.bind(null, d, ", ");
      a.addPropertiesHandler(c, f, [ "box-shadow", "text-shadow" ]);
    })(d);
    (function(a, b) {
      function c(a) {
        return a.toFixed(3).replace(".000", "");
      }
      function d(a, b, c) {
        return Math.min(b, Math.max(a, c));
      }
      function e(a) {
        if (/^\s*[-+]?(\d*\.)?\d+\s*$/.test(a)) {
          return Number(a);
        }
      }
      function f(a, b) {
        return [ a, b, c ];
      }
      function g(a, b) {
        if (0 == a) {
          return;
        }
        return i(0, 1 / 0)(a, b);
      }
      function h(a, b) {
        return [ a, b, function(a) {
          return Math.round(d(1, 1 / 0, a));
        } ];
      }
      function i(a, b) {
        return function(e, f) {
          return [ e, f, function(e) {
            return c(d(a, b, e));
          } ];
        };
      }
      function j(a, b) {
        return [ a, b, Math.round ];
      }
      a.clamp = d;
      a.addPropertiesHandler(e, i(0, 1 / 0), [ "border-image-width", "line-height" ]);
      a.addPropertiesHandler(e, i(0, 1), [ "opacity", "shape-image-threshold" ]);
      a.addPropertiesHandler(e, g, [ "flex-grow", "flex-shrink" ]);
      a.addPropertiesHandler(e, h, [ "orphans", "widows" ]);
      a.addPropertiesHandler(e, j, [ "z-index" ]);
      a.parseNumber = e;
      a.mergeNumbers = f;
      a.numberToString = c;
    })(d, f);
    (function(a, b) {
      function c(a, b) {
        if ("visible" != a && "visible" != b) {
          return;
        }
        return [ 0, 1, function(c) {
          if (c <= 0) {
            return a;
          }
          if (c >= 1) {
            return b;
          }
          return "visible";
        } ];
      }
      a.addPropertiesHandler(String, c, [ "visibility" ]);
    })(d);
    (function(a, b) {
      var c = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
      c.width = c.height = 1;
      var d = c.getContext("2d");
      function e(a) {
        a = a.trim();
        d.fillStyle = "#000";
        d.fillStyle = a;
        var b = d.fillStyle;
        d.fillStyle = "#fff";
        d.fillStyle = a;
        if (b != d.fillStyle) {
          return;
        }
        d.fillRect(0, 0, 1, 1);
        var c = d.getImageData(0, 0, 1, 1).data;
        d.clearRect(0, 0, 1, 1);
        var e = c[3] / 255;
        return [ c[0] * e, c[1] * e, c[2] * e, e ];
      }
      function f(b, c) {
        return [ b, c, function(b) {
          function c(a) {
            return Math.max(0, Math.min(255, a));
          }
          if (b[3]) {
            for (var d = 0; d < 3; d++) {
              b[d] = Math.round(c(b[d] / b[3]));
            }
          }
          b[3] = a.numberToString(a.clamp(0, 1, b[3]));
          return "rgba(" + b.join(",") + ")";
        } ];
      }
      a.addPropertiesHandler(e, f, [ "background-color", "border-bottom-color", "border-left-color", "border-right-color", "border-top-color", "color", "outline-color", "text-decoration-color" ]);
      a.consumeColor = a.consumeParenthesised.bind(null, e);
      a.mergeColors = f;
      if (false) {
        b.parseColor = e;
      }
    })(d, f);
    (function(a, b) {
      function c(a, b) {
        b = b.trim().toLowerCase();
        if ("0" == b && "px".search(a) >= 0) {
          return {
            px: 0
          };
        }
        if (!/^[^(]*$|^calc/.test(b)) {
          return;
        }
        b = b.replace(/calc\(/g, "(");
        var c = {};
        b = b.replace(a, function(a) {
          c[a] = null;
          return "U" + a;
        });
        var d = "U(" + a.source + ")";
        var e = b.replace(/[-+]?(\d*\.)?\d+/g, "N").replace(new RegExp("N" + d, "g"), "D").replace(/\s[+-]\s/g, "O").replace(/\s/g, "");
        var f = [ /N\*(D)/g, /(N|D)[*/]N/g, /(N|D)O\1/g, /\((N|D)\)/g ];
        var g = 0;
        while (g < f.length) {
          if (f[g].test(e)) {
            e = e.replace(f[g], "$1");
            g = 0;
          } else {
            g++;
          }
        }
        if ("D" != e) {
          return;
        }
        for (var h in c) {
          var i = eval(b.replace(new RegExp("U" + h, "g"), "").replace(new RegExp(d, "g"), "*0"));
          if (!isFinite(i)) {
            return;
          }
          c[h] = i;
        }
        return c;
      }
      function d(a, b) {
        return e(a, b, true);
      }
      function e(b, c, d) {
        var e = [], f;
        for (f in b) {
          e.push(f);
        }
        for (f in c) {
          if (e.indexOf(f) < 0) {
            e.push(f);
          }
        }
        b = e.map(function(a) {
          return b[a] || 0;
        });
        c = e.map(function(a) {
          return c[a] || 0;
        });
        return [ b, c, function(b) {
          var c = b.map(function(c, f) {
            if (1 == b.length && d) {
              c = Math.max(c, 0);
            }
            return a.numberToString(c) + e[f];
          }).join(" + ");
          return b.length > 1 ? "calc(" + c + ")" : c;
        } ];
      }
      var f = "px|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc";
      var g = c.bind(null, new RegExp(f, "g"));
      var h = c.bind(null, new RegExp(f + "|%", "g"));
      var i = c.bind(null, /deg|rad|grad|turn/g);
      a.parseLength = g;
      a.parseLengthOrPercent = h;
      a.consumeLengthOrPercent = a.consumeParenthesised.bind(null, h);
      a.parseAngle = i;
      a.mergeDimensions = e;
      var j = a.consumeParenthesised.bind(null, g);
      var k = a.consumeRepeated.bind(void 0, j, /^/);
      var l = a.consumeRepeated.bind(void 0, k, /^,/);
      a.consumeSizePairList = l;
      var m = function(a) {
        var b = l(a);
        if (b && "" == b[1]) {
          return b[0];
        }
      };
      var n = a.mergeNestedRepeated.bind(void 0, d, " ");
      var o = a.mergeNestedRepeated.bind(void 0, n, ",");
      a.mergeNonNegativeSizePair = n;
      a.addPropertiesHandler(m, o, [ "background-size" ]);
      a.addPropertiesHandler(h, d, [ "border-bottom-width", "border-image-width", "border-left-width", "border-right-width", "border-top-width", "flex-basis", "font-size", "height", "line-height", "max-height", "max-width", "outline-width", "width" ]);
      a.addPropertiesHandler(h, e, [ "border-bottom-left-radius", "border-bottom-right-radius", "border-top-left-radius", "border-top-right-radius", "bottom", "left", "letter-spacing", "margin-bottom", "margin-left", "margin-right", "margin-top", "min-height", "min-width", "outline-offset", "padding-bottom", "padding-left", "padding-right", "padding-top", "perspective", "right", "shape-margin", "text-indent", "top", "vertical-align", "word-spacing" ]);
    })(d, f);
    (function(a, b) {
      function c(b) {
        return a.consumeLengthOrPercent(b) || a.consumeToken(/^auto/, b);
      }
      function d(b) {
        var d = a.consumeList([ a.ignore(a.consumeToken.bind(null, /^rect/)), a.ignore(a.consumeToken.bind(null, /^\(/)), a.consumeRepeated.bind(null, c, /^,/), a.ignore(a.consumeToken.bind(null, /^\)/)) ], b);
        if (d && 4 == d[0].length) {
          return d[0];
        }
      }
      function e(b, c) {
        if ("auto" == b || "auto" == c) {
          return [ true, false, function(d) {
            var e = d ? b : c;
            if ("auto" == e) {
              return "auto";
            }
            var f = a.mergeDimensions(e, e);
            return f[2](f[0]);
          } ];
        }
        return a.mergeDimensions(b, c);
      }
      function f(a) {
        return "rect(" + a + ")";
      }
      var g = a.mergeWrappedNestedRepeated.bind(null, f, e, ", ");
      a.parseBox = d;
      a.mergeBoxes = g;
      a.addPropertiesHandler(d, g, [ "clip" ]);
    })(d, f);
    (function(a, b) {
      var c = null;
      function d(a) {
        return function(b) {
          var d = 0;
          return a.map(function(a) {
            return a === c ? b[d++] : a;
          });
        };
      }
      function e(a) {
        return a;
      }
      var f = {
        px: 0
      };
      var g = {
        deg: 0
      };
      var h = {
        matrix: [ "NNNNNN", [ c, c, 0, 0, c, c, 0, 0, 0, 0, 1, 0, c, c, 0, 1 ], e ],
        matrix3d: [ "NNNNNNNNNNNNNNNN", e ],
        rotate: [ "A" ],
        rotatex: [ "A" ],
        rotatey: [ "A" ],
        rotatez: [ "A" ],
        rotate3d: [ "NNNA" ],
        perspective: [ "L" ],
        scale: [ "Nn", d([ c, c, 1 ]), e ],
        scalex: [ "N", d([ c, 1, 1 ]), d([ c, 1 ]) ],
        scaley: [ "N", d([ 1, c, 1 ]), d([ 1, c ]) ],
        scalez: [ "N", d([ 1, 1, c ]) ],
        scale3d: [ "NNN", e ],
        skew: [ "Aa", null, e ],
        skewx: [ "A", null, d([ c, g ]) ],
        skewy: [ "A", null, d([ g, c ]) ],
        translate: [ "Tt", d([ c, c, f ]), e ],
        translatex: [ "T", d([ c, f, f ]), d([ c, f ]) ],
        translatey: [ "T", d([ f, c, f ]), d([ f, c ]) ],
        translatez: [ "L", d([ f, f, c ]) ],
        translate3d: [ "TTL", e ]
      };
      function i(b) {
        b = b.toLowerCase().trim();
        if ("none" == b) {
          return [];
        }
        var c = /\s*(\w+)\(([^)]*)\)/g;
        var d = [];
        var e;
        var i = 0;
        while (e = c.exec(b)) {
          if (e.index != i) {
            return;
          }
          i = e.index + e[0].length;
          var j = e[1];
          var k = h[j];
          if (!k) {
            return;
          }
          var l = e[2].split(",");
          var m = k[0];
          if (m.length < l.length) {
            return;
          }
          var n = [];
          for (var o = 0; o < m.length; o++) {
            var p = l[o];
            var q = m[o];
            var r;
            if (!p) {
              r = {
                a: g,
                n: n[0],
                t: f
              }[q];
            } else {
              r = {
                A: function(b) {
                  return "0" == b.trim() ? g : a.parseAngle(b);
                },
                N: a.parseNumber,
                T: a.parseLengthOrPercent,
                L: a.parseLength
              }[q.toUpperCase()](p);
            }
            if (void 0 === r) {
              return;
            }
            n.push(r);
          }
          d.push({
            t: j,
            d: n
          });
          if (c.lastIndex == b.length) {
            return d;
          }
        }
      }
      function j(a) {
        return a.toFixed(6).replace(".000000", "");
      }
      function k(b, c) {
        if (b.decompositionPair !== c) {
          b.decompositionPair = c;
          var d = a.makeMatrixDecomposition(b);
        }
        if (c.decompositionPair !== b) {
          c.decompositionPair = b;
          var e = a.makeMatrixDecomposition(c);
        }
        if (null == d[0] || null == e[0]) {
          return [ [ false ], [ true ], function(a) {
            return a ? c[0].d : b[0].d;
          } ];
        }
        d[0].push(0);
        e[0].push(1);
        return [ d, e, function(b) {
          var c = a.quat(d[0][3], e[0][3], b[5]);
          var f = a.composeMatrix(b[0], b[1], b[2], c, b[4]);
          var g = f.map(j).join(",");
          return g;
        } ];
      }
      function l(a) {
        return a.replace(/[xy]/, "");
      }
      function m(a) {
        return a.replace(/(x|y|z|3d)?$/, "3d");
      }
      function n(b, c) {
        var d = a.makeMatrixDecomposition && true;
        var e = false;
        if (!b.length || !c.length) {
          if (!b.length) {
            e = true;
            b = c;
            c = [];
          }
          for (var f = 0; f < b.length; f++) {
            var g = b[f].t;
            var i = b[f].d;
            var j = "scale" == g.substr(0, 5) ? 1 : 0;
            c.push({
              t: g,
              d: i.map(function(a) {
                if ("number" == typeof a) {
                  return j;
                }
                var b = {};
                for (var c in a) {
                  b[c] = j;
                }
                return b;
              })
            });
          }
        }
        var n = function(a, b) {
          return "perspective" == a && "perspective" == b || ("matrix" == a || "matrix3d" == a) && ("matrix" == b || "matrix3d" == b);
        };
        var o = [];
        var p = [];
        var q = [];
        if (b.length != c.length) {
          if (!d) {
            return;
          }
          var r = k(b, c);
          o = [ r[0] ];
          p = [ r[1] ];
          q = [ [ "matrix", [ r[2] ] ] ];
        } else {
          for (var f = 0; f < b.length; f++) {
            var s = b[f].t;
            var t = c[f].t;
            var u = b[f].d;
            var v = c[f].d;
            var w = h[s];
            var x = h[t];
            var g;
            if (n(s, t)) {
              if (!d) {
                return;
              }
              var r = k([ b[f] ], [ c[f] ]);
              o.push(r[0]);
              p.push(r[1]);
              q.push([ "matrix", [ r[2] ] ]);
              continue;
            } else {
              if (s == t) {
                g = s;
              } else {
                if (w[2] && x[2] && l(s) == l(t)) {
                  g = l(s);
                  u = w[2](u);
                  v = x[2](v);
                } else {
                  if (w[1] && x[1] && m(s) == m(t)) {
                    g = m(s);
                    u = w[1](u);
                    v = x[1](v);
                  } else {
                    if (!d) {
                      return;
                    }
                    var r = k(b, c);
                    o = [ r[0] ];
                    p = [ r[1] ];
                    q = [ [ "matrix", [ r[2] ] ] ];
                    break;
                  }
                }
              }
            }
            var y = [];
            var z = [];
            var A = [];
            for (var B = 0; B < u.length; B++) {
              var C = "number" == typeof u[B] ? a.mergeNumbers : a.mergeDimensions;
              var r = C(u[B], v[B]);
              y[B] = r[0];
              z[B] = r[1];
              A.push(r[2]);
            }
            o.push(y);
            p.push(z);
            q.push([ g, A ]);
          }
        }
        if (e) {
          var D = o;
          o = p;
          p = D;
        }
        return [ o, p, function(a) {
          return a.map(function(a, b) {
            var c = a.map(function(a, c) {
              return q[b][1][c](a);
            }).join(",");
            if ("matrix" == q[b][0] && 16 == c.split(",").length) {
              q[b][0] = "matrix3d";
            }
            return q[b][0] + "(" + c + ")";
          }).join(" ");
        } ];
      }
      a.addPropertiesHandler(i, n, [ "transform" ]);
      if (false) {
        b.parseTransform = i;
      }
    })(d, f);
    (function(a) {
      function b(a) {
        var b = Number(a);
        if (isNaN(b) || b < 100 || b > 900 || b % 100 !== 0) {
          return;
        }
        return b;
      }
      function c(b) {
        b = 100 * Math.round(b / 100);
        b = a.clamp(100, 900, b);
        if (400 === b) {
          return "normal";
        }
        if (700 === b) {
          return "bold";
        }
        return String(b);
      }
      function d(a, b) {
        return [ a, b, c ];
      }
      a.addPropertiesHandler(b, d, [ "font-weight" ]);
    })(d);
    (function(a) {
      function b(a) {
        var b = {};
        for (var c in a) {
          b[c] = -a[c];
        }
        return b;
      }
      function c(b) {
        return a.consumeToken(/^(left|center|right|top|bottom)\b/i, b) || a.consumeLengthOrPercent(b);
      }
      var d = {
        left: {
          "%": 0
        },
        center: {
          "%": 50
        },
        right: {
          "%": 100
        },
        top: {
          "%": 0
        },
        bottom: {
          "%": 100
        }
      };
      function e(b, e) {
        var f = a.consumeRepeated(c, /^/, e);
        if (!f || "" != f[1]) {
          return;
        }
        var g = f[0];
        g[0] = g[0] || "center";
        g[1] = g[1] || "center";
        if (3 == b) {
          g[2] = g[2] || {
            px: 0
          };
        }
        if (g.length != b) {
          return;
        }
        if (/top|bottom/.test(g[0]) || /left|right/.test(g[1])) {
          var h = g[0];
          g[0] = g[1];
          g[1] = h;
        }
        if (!/left|right|center|Object/.test(g[0])) {
          return;
        }
        if (!/top|bottom|center|Object/.test(g[1])) {
          return;
        }
        return g.map(function(a) {
          return "object" == typeof a ? a : d[a];
        });
      }
      var f = a.mergeNestedRepeated.bind(null, a.mergeDimensions, " ");
      a.addPropertiesHandler(e.bind(null, 3), f, [ "transform-origin" ]);
      a.addPropertiesHandler(e.bind(null, 2), f, [ "perspective-origin" ]);
      function g(e) {
        var f = a.consumeRepeated(c, /^/, e);
        if (!f) {
          return;
        }
        var g = f[0];
        var h = [ {
          "%": 50
        }, {
          "%": 50
        } ];
        var i = 0;
        var j = false;
        for (var k = 0; k < g.length; k++) {
          var l = g[k];
          if ("string" == typeof l) {
            j = /bottom|right/.test(l);
            i = {
              left: 0,
              right: 0,
              center: i,
              top: 1,
              bottom: 1
            }[l];
            h[i] = d[l];
            if ("center" == l) {
              i++;
            }
          } else {
            if (j) {
              l = b(l);
              l["%"] = (l["%"] || 0) + 100;
            }
            h[i] = l;
            i++;
            j = false;
          }
        }
        return [ h, f[1] ];
      }
      function h(b) {
        var c = a.consumeRepeated(g, /^,/, b);
        if (c && "" == c[1]) {
          return c[0];
        }
      }
      a.consumePosition = g;
      a.mergeOffsetList = f;
      var i = a.mergeNestedRepeated.bind(null, f, ", ");
      a.addPropertiesHandler(h, i, [ "background-position", "object-position" ]);
    })(d);
    (function(a) {
      var b = a.consumeParenthesised.bind(null, a.parseLengthOrPercent);
      var c = a.consumeRepeated.bind(void 0, b, /^/);
      var d = a.mergeNestedRepeated.bind(void 0, a.mergeDimensions, " ");
      var e = a.mergeNestedRepeated.bind(void 0, d, ",");
      function f(d) {
        var e = a.consumeToken(/^circle/, d);
        if (e && e[0]) {
          return [ "circle" ].concat(a.consumeList([ a.ignore(a.consumeToken.bind(void 0, /^\(/)), b, a.ignore(a.consumeToken.bind(void 0, /^at/)), a.consumePosition, a.ignore(a.consumeToken.bind(void 0, /^\)/)) ], e[1]));
        }
        var f = a.consumeToken(/^ellipse/, d);
        if (f && f[0]) {
          return [ "ellipse" ].concat(a.consumeList([ a.ignore(a.consumeToken.bind(void 0, /^\(/)), c, a.ignore(a.consumeToken.bind(void 0, /^at/)), a.consumePosition, a.ignore(a.consumeToken.bind(void 0, /^\)/)) ], f[1]));
        }
        var g = a.consumeToken(/^polygon/, d);
        if (g && g[0]) {
          return [ "polygon" ].concat(a.consumeList([ a.ignore(a.consumeToken.bind(void 0, /^\(/)), a.optional(a.consumeToken.bind(void 0, /^nonzero\s*,|^evenodd\s*,/), "nonzero,"), a.consumeSizePairList, a.ignore(a.consumeToken.bind(void 0, /^\)/)) ], g[1]));
        }
      }
      function g(b, c) {
        if (b[0] !== c[0]) {
          return;
        }
        if ("circle" == b[0]) {
          return a.mergeList(b.slice(1), c.slice(1), [ "circle(", a.mergeDimensions, " at ", a.mergeOffsetList, ")" ]);
        }
        if ("ellipse" == b[0]) {
          return a.mergeList(b.slice(1), c.slice(1), [ "ellipse(", a.mergeNonNegativeSizePair, " at ", a.mergeOffsetList, ")" ]);
        }
        if ("polygon" == b[0] && b[1] == c[1]) {
          return a.mergeList(b.slice(2), c.slice(2), [ "polygon(", b[1], e, ")" ]);
        }
      }
      a.addPropertiesHandler(f, g, [ "shape-outside" ]);
    })(d);
    (function(a, b) {
      var c = {};
      function d(a, b) {
        b.concat([ a ]).forEach(function(b) {
          if (b in document.documentElement.style) {
            c[a] = b;
          }
        });
      }
      d("transform", [ "webkitTransform", "msTransform" ]);
      d("transformOrigin", [ "webkitTransformOrigin" ]);
      d("perspective", [ "webkitPerspective" ]);
      d("perspectiveOrigin", [ "webkitPerspectiveOrigin" ]);
      a.propertyName = function(a) {
        return c[a] || a;
      };
    })(d, f);
  })();
})({}, function() {
  return this;
}());
//# sourceMappingURL=web-animations.min.js.map